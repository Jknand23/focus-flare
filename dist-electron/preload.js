"use strict";
const electron = require("electron");
const IPC_CHANNELS = {
  // Activity data operations
  GET_ACTIVITIES: "activity:get-all",
  GET_RECENT_ACTIVITIES: "activity:get-recent",
  GET_ACTIVITIES_BY_DATE: "activity:get-by-date",
  GET_SESSIONS_BY_DATE: "session:get-by-date",
  UPDATE_SESSION: "session:update",
  CLASSIFY_SESSION: "session:classify",
  // System operations
  SHOW_DASHBOARD: "system:show-dashboard",
  HIDE_DASHBOARD: "system:hide-dashboard",
  GET_APP_VERSION: "system:get-version",
  // Database operations
  DB_HEALTH_CHECK: "db:health-check"
};
function createSafeIpcInvoke(channel) {
  return async (request) => {
    try {
      const result = await electron.ipcRenderer.invoke(channel, request);
      return result;
    } catch (error) {
      console.error(`IPC call failed for channel ${channel}:`, error);
      throw error;
    }
  };
}
const activitiesAPI = {
  /**
   * Retrieves all activities from the database
   * @returns Promise resolving to array of activity data
   */
  getAll: createSafeIpcInvoke(IPC_CHANNELS.GET_ACTIVITIES),
  /**
   * Retrieves recent activities within specified time range
   * @param request - Request parameters including hours and limit
   * @returns Promise resolving to array of recent activity data
   */
  getRecent: createSafeIpcInvoke(
    IPC_CHANNELS.GET_RECENT_ACTIVITIES
  ),
  /**
   * Retrieves activities within specified date range
   * @param request - Request parameters including date range and limit
   * @returns Promise resolving to array of activity data
   */
  getByDate: createSafeIpcInvoke(
    IPC_CHANNELS.GET_ACTIVITIES_BY_DATE
  )
};
const systemAPI = {
  /**
   * Shows the dashboard window
   */
  showDashboard: createSafeIpcInvoke(IPC_CHANNELS.SHOW_DASHBOARD),
  /**
   * Hides the dashboard window
   */
  hideDashboard: createSafeIpcInvoke(IPC_CHANNELS.HIDE_DASHBOARD),
  /**
   * Gets the application version
   */
  getVersion: createSafeIpcInvoke(IPC_CHANNELS.GET_APP_VERSION)
};
const sessionsAPI = {
  /**
   * Retrieves sessions within specified date range
   * @param request - Request parameters including date range and limit
   * @returns Promise resolving to array of session data
   */
  getByDateRange: createSafeIpcInvoke(
    IPC_CHANNELS.GET_SESSIONS_BY_DATE
  ),
  /**
   * Updates session classification and feedback
   * @param request - Update request with session ID and changes
   */
  update: createSafeIpcInvoke(
    IPC_CHANNELS.UPDATE_SESSION
  ),
  /**
   * Triggers session classification for recent activities
   */
  classify: createSafeIpcInvoke(IPC_CHANNELS.CLASSIFY_SESSION)
};
const databaseAPI = {
  /**
   * Performs a database health check
   * @returns Promise resolving to true if database is healthy
   */
  healthCheck: createSafeIpcInvoke(IPC_CHANNELS.DB_HEALTH_CHECK)
};
const ollamaAPI = {
  /**
   * Performs an Ollama health check
   * @returns Promise resolving to true if Ollama is connected
   */
  healthCheck: createSafeIpcInvoke("ollama:health-check")
};
const monitoringAPI = {
  /**
   * Gets the current monitoring status
   */
  getStatus: createSafeIpcInvoke("monitoring:get-status"),
  /**
   * Pauses activity monitoring
   */
  pause: createSafeIpcInvoke("monitoring:pause"),
  /**
   * Resumes activity monitoring
   */
  resume: createSafeIpcInvoke("monitoring:resume")
};
const settingsAPI = {
  /**
   * Gets current user settings
   */
  get: createSafeIpcInvoke("settings:get"),
  /**
   * Updates user settings
   */
  update: createSafeIpcInvoke("settings:update"),
  /**
   * Resets settings to defaults
   */
  reset: createSafeIpcInvoke("settings:reset"),
  /**
   * Clears all activity data
   */
  clearActivityData: createSafeIpcInvoke("settings:clear-activity-data")
};
const eventHandlers = /* @__PURE__ */ new Map();
function addEventListener(channel, callback) {
  var _a;
  if (!eventHandlers.has(channel)) {
    eventHandlers.set(channel, /* @__PURE__ */ new Set());
    electron.ipcRenderer.on(channel, (_event, ...args) => {
      const handlers = eventHandlers.get(channel);
      if (handlers) {
        handlers.forEach((handler) => {
          try {
            handler(...args);
          } catch (error) {
            console.error(`Error in IPC event handler for ${channel}:`, error);
          }
        });
      }
    });
  }
  (_a = eventHandlers.get(channel)) == null ? void 0 : _a.add(callback);
}
function removeEventListener(channel, callback) {
  const handlers = eventHandlers.get(channel);
  if (handlers) {
    handlers.delete(callback);
    if (handlers.size === 0) {
      electron.ipcRenderer.removeAllListeners(channel);
      eventHandlers.delete(channel);
    }
  }
}
const eventsAPI = {
  /**
   * Add event listener for IPC messages from main process
   */
  addEventListener,
  /**
   * Remove event listener for IPC messages
   */
  removeEventListener
};
const electronAPI = {
  activities: activitiesAPI,
  sessions: sessionsAPI,
  system: systemAPI,
  database: databaseAPI,
  ollama: ollamaAPI,
  monitoring: monitoringAPI,
  settings: settingsAPI,
  events: eventsAPI
};
try {
  electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
  console.log("Preload script: API exposed successfully");
} catch (error) {
  console.error("Preload script: Failed to expose API:", error);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
