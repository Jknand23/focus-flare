{"version":3,"file":"main.js","sources":["../src/shared/constants/app-constants.ts","../src/main/database/migrations/002-add-sessions-schema.ts","../src/main/database/connection.ts","../src/main/system-monitoring/activity-logger.ts","../src/shared/types/activity-types.ts","../src/main/ai-integration/ollama-client.ts","../src/main/ai-integration/session-classifier.ts","../src/main/main.ts"],"sourcesContent":["/**\r\n * App Constants - Shared application constants and configuration values\r\n * \r\n * Contains all configuration constants, default values, timeouts, and other\r\n * application-wide settings used throughout FocusFlare. These constants are\r\n * shared between main and renderer processes to ensure consistency.\r\n * \r\n * @module AppConstants\r\n * @author FocusFlare Team\r\n * @since 0.1.0\r\n */\r\n\r\n// === APPLICATION METADATA ===\r\n\r\n/** Application name */\r\nexport const APP_NAME = 'FocusFlare';\r\n\r\n/** Application version (should match package.json) */\r\nexport const APP_VERSION = '0.1.0';\r\n\r\n/** Application identifier for system integration */\r\nexport const APP_ID = 'com.focusflare.app';\r\n\r\n// === SYSTEM MONITORING CONFIGURATION ===\r\n\r\n/** Default polling interval for activity monitoring (milliseconds) */\r\nexport const DEFAULT_POLLING_INTERVAL = 5000;\r\n\r\n/** Minimum polling interval allowed (milliseconds) */\r\nexport const MIN_POLLING_INTERVAL = 1000;\r\n\r\n/** Maximum polling interval allowed (milliseconds) */\r\nexport const MAX_POLLING_INTERVAL = 30000;\r\n\r\n/** Maximum retry attempts for system monitoring operations */\r\nexport const MAX_MONITORING_RETRIES = 3;\r\n\r\n/** Timeout for individual monitoring operations (milliseconds) */\r\nexport const MONITORING_TIMEOUT = 10000;\r\n\r\n// === DATABASE CONFIGURATION ===\r\n\r\n/** Default database filename */\r\nexport const DB_FILENAME = 'focusflare.db';\r\n\r\n/** Maximum number of activity records to keep (0 = unlimited) */\r\nexport const MAX_ACTIVITY_RECORDS = 0;\r\n\r\n/** Default number of days to retain activity data */\r\nexport const DEFAULT_DATA_RETENTION_DAYS = 365;\r\n\r\n/** Maximum database file size in bytes (100MB) */\r\nexport const MAX_DB_SIZE = 100 * 1024 * 1024;\r\n\r\n/** Database vacuum frequency (days) */\r\nexport const DB_VACUUM_FREQUENCY_DAYS = 7;\r\n\r\n// === UI CONFIGURATION ===\r\n\r\n/** Default window width for dashboard */\r\nexport const DEFAULT_WINDOW_WIDTH = 1200;\r\n\r\n/** Default window height for dashboard */\r\nexport const DEFAULT_WINDOW_HEIGHT = 800;\r\n\r\n/** Minimum window width */\r\nexport const MIN_WINDOW_WIDTH = 800;\r\n\r\n/** Minimum window height */\r\nexport const MIN_WINDOW_HEIGHT = 600;\r\n\r\n/** Default number of recent activities to display */\r\nexport const DEFAULT_ACTIVITY_LIMIT = 100;\r\n\r\n/** Maximum number of activities to display in UI */\r\nexport const MAX_ACTIVITY_DISPLAY_LIMIT = 1000;\r\n\r\n// === PRIVACY SETTINGS ===\r\n\r\n/** List of application names to exclude from tracking */\r\nexport const EXCLUDED_APPS = [\r\n  'keepass',\r\n  'bitwarden',\r\n  'lastpass',\r\n  '1password',\r\n  'windows security',\r\n  'windows defender',\r\n  'task manager',\r\n  'password',\r\n  'credential'\r\n];\r\n\r\n/** List of window title patterns to exclude (case-insensitive) */\r\nexport const EXCLUDED_TITLE_PATTERNS = [\r\n  'password',\r\n  'credential',\r\n  'login',\r\n  'sign in',\r\n  'sign up',\r\n  'private',\r\n  'incognito',\r\n  'private browsing'\r\n];\r\n\r\n// === PERFORMANCE SETTINGS ===\r\n\r\n/** Maximum number of concurrent database operations */\r\nexport const MAX_CONCURRENT_DB_OPS = 5;\r\n\r\n/** Default timeout for IPC operations (milliseconds) */\r\nexport const IPC_TIMEOUT = 5000;\r\n\r\n/** Memory usage warning threshold (MB) */\r\nexport const MEMORY_WARNING_THRESHOLD = 200;\r\n\r\n/** CPU usage warning threshold (percentage) */\r\nexport const CPU_WARNING_THRESHOLD = 10;\r\n\r\n// === DEVELOPMENT SETTINGS ===\r\n\r\n/** Enable debug logging in development */\r\nexport const DEBUG_LOGGING = process.env.NODE_ENV === 'development';\r\n\r\n/** Enable performance monitoring */\r\nexport const ENABLE_PERFORMANCE_MONITORING = process.env.NODE_ENV === 'development';\r\n\r\n// === SYSTEM TRAY CONFIGURATION ===\r\n\r\n/** System tray tooltip text */\r\nexport const TRAY_TOOLTIP = 'FocusFlare - Activity Tracker';\r\n\r\n/** System tray menu labels */\r\nexport const TRAY_MENU = {\r\n  SHOW_DASHBOARD: 'Open Dashboard',\r\n  HIDE_DASHBOARD: 'Hide Dashboard',\r\n  SETTINGS: 'Settings',\r\n  QUIT: 'Quit FocusFlare'\r\n} as const;\r\n\r\n// === ERROR MESSAGES ===\r\n\r\n/** Standard error messages for user display */\r\nexport const ERROR_MESSAGES = {\r\n  DB_CONNECTION_FAILED: 'Failed to connect to database',\r\n  DB_OPERATION_FAILED: 'Database operation failed',\r\n  DB_READ_FAILED: 'Failed to read from database',\r\n  DB_WRITE_FAILED: 'Failed to write to database',\r\n  MONITORING_FAILED: 'Activity monitoring failed',\r\n  PERMISSION_DENIED: 'Permission denied for system monitoring',\r\n  UNKNOWN_ERROR: 'An unknown error occurred'\r\n} as const;\r\n\r\n// === SUCCESS MESSAGES ===\r\n\r\n/** Standard success messages for user display */\r\nexport const SUCCESS_MESSAGES = {\r\n  DB_CONNECTED: 'Database connected successfully',\r\n  MONITORING_STARTED: 'Activity monitoring started',\r\n  MONITORING_STOPPED: 'Activity monitoring stopped',\r\n  SETTINGS_SAVED: 'Settings saved successfully'\r\n} as const; ","/**\r\n * Migration 002 - Add Sessions Schema\r\n * \r\n * Adds the sessions table for AI-classified activity groupings, user settings\r\n * table for preferences, and AI feedback table for learning. This migration\r\n * supports Phase 2 MVP functionality including session classification,\r\n * user customization, and AI improvement through feedback.\r\n * \r\n * @module Migration002\r\n * @author FocusFlare Team\r\n * @since 0.2.0\r\n */\r\n\r\nimport type Database from 'better-sqlite3';\r\n\r\n// === MIGRATION QUERIES ===\r\n\r\n/**\r\n * SQL schema for sessions table\r\n */\r\nconst CREATE_SESSIONS_TABLE = `\r\n  CREATE TABLE IF NOT EXISTS sessions (\r\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    start_time DATETIME NOT NULL,\r\n    end_time DATETIME NOT NULL,\r\n    duration INTEGER NOT NULL,\r\n    session_type TEXT NOT NULL DEFAULT 'unclear',\r\n    confidence_score REAL DEFAULT 0.0,\r\n    user_corrected BOOLEAN DEFAULT FALSE,\r\n    user_feedback TEXT,\r\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n  )\r\n`;\r\n\r\n/**\r\n * SQL schema for user settings table\r\n */\r\nconst CREATE_USER_SETTINGS_TABLE = `\r\n  CREATE TABLE IF NOT EXISTS user_settings (\r\n    key TEXT PRIMARY KEY,\r\n    value TEXT NOT NULL,\r\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n  )\r\n`;\r\n\r\n/**\r\n * SQL schema for AI feedback table\r\n */\r\nconst CREATE_AI_FEEDBACK_TABLE = `\r\n  CREATE TABLE IF NOT EXISTS ai_feedback (\r\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    session_id INTEGER REFERENCES sessions(id),\r\n    original_classification TEXT NOT NULL,\r\n    corrected_classification TEXT NOT NULL,\r\n    user_context TEXT,\r\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n  )\r\n`;\r\n\r\n/**\r\n * Add session_id and is_idle columns to activities table\r\n */\r\nconst ALTER_ACTIVITIES_TABLE = `\r\n  ALTER TABLE activities ADD COLUMN session_id INTEGER REFERENCES sessions(id)\r\n`;\r\n\r\nconst ALTER_ACTIVITIES_TABLE_IDLE = `\r\n  ALTER TABLE activities ADD COLUMN is_idle BOOLEAN DEFAULT FALSE\r\n`;\r\n\r\n/**\r\n * Performance indexes for new tables\r\n */\r\nconst CREATE_INDEXES = [\r\n  'CREATE INDEX IF NOT EXISTS idx_sessions_start_time ON sessions(start_time)',\r\n  'CREATE INDEX IF NOT EXISTS idx_sessions_type ON sessions(session_type)',\r\n  'CREATE INDEX IF NOT EXISTS idx_sessions_user_corrected ON sessions(user_corrected)',\r\n  'CREATE INDEX IF NOT EXISTS idx_activities_session_id ON activities(session_id)',\r\n  'CREATE INDEX IF NOT EXISTS idx_activities_is_idle ON activities(is_idle)',\r\n  'CREATE INDEX IF NOT EXISTS idx_ai_feedback_session_id ON ai_feedback(session_id)',\r\n  'CREATE INDEX IF NOT EXISTS idx_user_settings_key ON user_settings(key)'\r\n];\r\n\r\n/**\r\n * Default user settings\r\n */\r\nconst DEFAULT_SETTINGS = [\r\n  ['work_hours_start', '09:00'],\r\n  ['work_hours_end', '17:00'],\r\n  ['break_duration_minutes', '15'],\r\n  ['focus_session_goal_minutes', '120'],\r\n  ['theme_preference', 'system'],\r\n  ['notifications_enabled', 'true'],\r\n  ['morning_nudge_enabled', 'false'],\r\n  ['data_retention_days', '90'],\r\n  ['ai_classification_enabled', 'true']\r\n];\r\n\r\n// === MIGRATION FUNCTIONS ===\r\n\r\n/**\r\n * Applies migration 002 - adds sessions and related tables\r\n * \r\n * @param db - Database connection instance\r\n * @throws {Error} If migration fails\r\n */\r\nexport function up(db: Database.Database): void {\r\n  try {\r\n    // Create new tables\r\n    db.exec(CREATE_SESSIONS_TABLE);\r\n    db.exec(CREATE_USER_SETTINGS_TABLE);\r\n    db.exec(CREATE_AI_FEEDBACK_TABLE);\r\n    \r\n    // Alter existing activities table\r\n    try {\r\n      db.exec(ALTER_ACTIVITIES_TABLE);\r\n    } catch (error) {\r\n      // Column might already exist, check if it's a duplicate column error\r\n      const errorMessage = error instanceof Error ? error.message : String(error);\r\n      if (!errorMessage.includes('duplicate column name')) {\r\n        throw error;\r\n      }\r\n    }\r\n    \r\n    try {\r\n      db.exec(ALTER_ACTIVITIES_TABLE_IDLE);\r\n    } catch (error) {\r\n      // Column might already exist, check if it's a duplicate column error\r\n      const errorMessage = error instanceof Error ? error.message : String(error);\r\n      if (!errorMessage.includes('duplicate column name')) {\r\n        throw error;\r\n      }\r\n    }\r\n    \r\n    // Create indexes\r\n    for (const indexSQL of CREATE_INDEXES) {\r\n      db.exec(indexSQL);\r\n    }\r\n    \r\n    // Insert default settings\r\n    const insertSetting = db.prepare('INSERT OR IGNORE INTO user_settings (key, value) VALUES (?, ?)');\r\n    \r\n    for (const [key, value] of DEFAULT_SETTINGS) {\r\n      insertSetting.run(key, value);\r\n    }\r\n    \r\n    console.log('Migration 002: Sessions schema applied successfully');\r\n  } catch (error) {\r\n    console.error('Migration 002 failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Reverts migration 002 - removes sessions and related tables\r\n * \r\n * @param db - Database connection instance\r\n * @throws {Error} If rollback fails\r\n */\r\nexport function down(db: Database.Database): void {\r\n  try {\r\n    // Drop indexes\r\n    const dropIndexes = [\r\n      'DROP INDEX IF EXISTS idx_sessions_start_time',\r\n      'DROP INDEX IF EXISTS idx_sessions_type',\r\n      'DROP INDEX IF EXISTS idx_sessions_user_corrected',\r\n      'DROP INDEX IF EXISTS idx_activities_session_id',\r\n      'DROP INDEX IF EXISTS idx_activities_is_idle',\r\n      'DROP INDEX IF EXISTS idx_ai_feedback_session_id',\r\n      'DROP INDEX IF EXISTS idx_user_settings_key'\r\n    ];\r\n    \r\n    for (const dropSQL of dropIndexes) {\r\n      db.exec(dropSQL);\r\n    }\r\n    \r\n    // Note: SQLite doesn't support DROP COLUMN, so we can't easily remove\r\n    // the added columns from activities table without recreating the table\r\n    \r\n    // Drop tables (order matters due to foreign keys)\r\n    db.exec('DROP TABLE IF EXISTS ai_feedback');\r\n    db.exec('DROP TABLE IF EXISTS sessions');\r\n    db.exec('DROP TABLE IF EXISTS user_settings');\r\n    \r\n    console.log('Migration 002: Sessions schema reverted successfully');\r\n  } catch (error) {\r\n    console.error('Migration 002 rollback failed:', error);\r\n    throw error;\r\n  }\r\n} ","/**\n * Database Connection - SQLite database management and connection handling\n * \n * Manages the local SQLite database connection for FocusFlare activity tracking.\n * Handles database initialization, schema creation, migrations, and provides\n * a centralized connection interface for all database operations.\n * Uses better-sqlite3 for high performance native SQLite access.\n * \n * @module DatabaseConnection\n * @author FocusFlare Team\n * @since 0.1.0\n */\n\nimport Database from 'better-sqlite3';\nimport { app } from 'electron';\nimport path from 'path';\nimport fs from 'fs';\nimport { \n  DB_FILENAME, \n  DEBUG_LOGGING,\n  ERROR_MESSAGES,\n  SUCCESS_MESSAGES \n} from '@/shared/constants/app-constants';\nimport type { \n  ActivityTableRow,\n  SessionData,\n  SessionTableRow,\n  UpdateSessionRequest,\n  GetSessionsByDateRequest,\n  RawActivityData\n} from '@/shared/types/activity-types';\nimport { up as runMigration002 } from './migrations/002-add-sessions-schema';\n\n// === DATABASE INSTANCE ===\n\n/** Global database instance */\nlet database: Database.Database | null = null;\n/** Database file path */\nlet dbPath: string = '';\n\n// === PREPARED STATEMENTS ===\n\n/** Prepared statement for inserting activities */\nlet insertActivityStatement: Database.Statement | null = null;\n/** Prepared statement for getting activities with pagination */\nlet getActivitiesStatement: Database.Statement | null = null;\n/** Prepared statement for counting activities */\nlet countActivitiesStatement: Database.Statement | null = null;\n/** Prepared statement for deleting old activities */\nlet deleteOldActivitiesStatement: Database.Statement | null = null;\n\n// === DATABASE SCHEMA ===\n\n/**\n * SQL schema for activities table\n */\nconst ACTIVITIES_TABLE_SCHEMA = `\n  CREATE TABLE IF NOT EXISTS activities (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n    app_name TEXT NOT NULL,\n    window_title TEXT,\n    duration INTEGER DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n  )\n`;\n\n/**\n * SQL indexes for performance optimization\n */\nconst ACTIVITY_INDEXES = [\n  'CREATE INDEX IF NOT EXISTS idx_activities_timestamp ON activities(timestamp)',\n  'CREATE INDEX IF NOT EXISTS idx_activities_app_name ON activities(app_name)',\n  'CREATE INDEX IF NOT EXISTS idx_activities_created_at ON activities(created_at)'\n];\n\n// === DATABASE INITIALIZATION ===\n\n/**\n * Initializes the SQLite database connection and creates necessary tables\n * \n * Creates the database file in the user data directory, establishes connection,\n * creates tables and indexes, and configures database settings for optimal\n * performance and reliability.\n * \n * @returns Promise resolving to true if initialization successful\n * @throws {Error} If database initialization fails\n */\nexport async function initializeDatabase(): Promise<boolean> {\n  try {\n    // Get user data directory path\n    const userDataPath = app.getPath('userData');\n    dbPath = path.join(userDataPath, DB_FILENAME);\n    \n    // Ensure user data directory exists\n    if (!fs.existsSync(userDataPath)) {\n      fs.mkdirSync(userDataPath, { recursive: true });\n    }\n    \n    if (DEBUG_LOGGING) {\n      console.log(`Initializing database at: ${dbPath}`);\n    }\n    \n    // Create database connection\n    database = new Database(dbPath, {\n      verbose: DEBUG_LOGGING ? console.log : undefined,\n    });\n    \n    // Configure database for optimal performance\n    database.pragma('journal_mode = WAL'); // Enable Write-Ahead Logging\n    database.pragma('synchronous = NORMAL'); // Balance safety and performance\n    database.pragma('cache_size = 10000'); // 10MB cache\n    database.pragma('foreign_keys = ON'); // Enable foreign key constraints\n    \n    // Create tables\n    database.exec(ACTIVITIES_TABLE_SCHEMA);\n    \n    // Create indexes\n    for (const indexSQL of ACTIVITY_INDEXES) {\n      database.exec(indexSQL);\n    }\n    \n    // Run Phase 2 migration (sessions schema)\n    runMigration002(database);\n    \n    // Prepare frequently used statements\n    prepareStatements();\n    \n    if (DEBUG_LOGGING) {\n      console.log(SUCCESS_MESSAGES.DB_CONNECTED);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Database initialization failed:', error);\n    throw new Error(`${ERROR_MESSAGES.DB_CONNECTION_FAILED}: ${error}`);\n  }\n}\n\n/**\n * Prepares commonly used SQL statements for better performance\n */\nfunction prepareStatements(): void {\n  if (!database) return;\n  \n  try {\n    insertActivityStatement = database.prepare(`\n      INSERT INTO activities (timestamp, app_name, window_title, duration)\n      VALUES (?, ?, ?, ?)\n    `);\n    \n    getActivitiesStatement = database.prepare(`\n      SELECT * FROM activities \n      WHERE (? IS NULL OR timestamp >= ?)\n        AND (? IS NULL OR timestamp <= ?)\n      ORDER BY timestamp DESC\n      LIMIT ? OFFSET ?\n    `);\n    \n    countActivitiesStatement = database.prepare(`\n      SELECT COUNT(*) as count FROM activities\n      WHERE (? IS NULL OR timestamp >= ?)\n        AND (? IS NULL OR timestamp <= ?)\n    `);\n    \n    deleteOldActivitiesStatement = database.prepare(`\n      DELETE FROM activities WHERE timestamp < ?\n    `);\n    \n    if (DEBUG_LOGGING) {\n      console.log('Prepared statements initialized successfully');\n    }\n  } catch (error) {\n    console.error('Failed to prepare statements:', error);\n  }\n}\n\n/**\n * Gets the current database connection instance\n * \n * @returns Database instance or null if not initialized\n * @throws {Error} If database is not initialized\n */\nexport function getDatabaseConnection(): Database.Database {\n  if (!database) {\n    throw new Error('Database not initialized. Call initializeDatabase() first.');\n  }\n  return database;\n}\n\n/**\n * Closes the database connection gracefully\n * \n * Performs any necessary cleanup operations and closes the database\n * connection. Should be called when the application is shutting down.\n */\nexport async function closeDatabaseConnection(): Promise<void> {\n  if (database) {\n    try {\n      // Prepared statements are automatically finalized when database is closed\n      \n      // Close database connection\n      database.close();\n      database = null;\n      \n      // Reset prepared statements\n      insertActivityStatement = null;\n      getActivitiesStatement = null;\n      countActivitiesStatement = null;\n      deleteOldActivitiesStatement = null;\n      \n      if (DEBUG_LOGGING) {\n        console.log('Database connection closed successfully');\n      }\n    } catch (error) {\n      console.error('Error closing database connection:', error);\n    }\n  }\n}\n\n/**\n * Performs a health check on the database connection\n * \n * Executes a simple query to verify the database is accessible and\n * responding correctly. Used for monitoring and diagnostics.\n * \n * @returns Promise resolving to true if database is healthy\n */\nexport async function checkDatabaseHealth(): Promise<boolean> {\n  try {\n    if (!database) {\n      return false;\n    }\n    \n    // Perform a simple query to test connectivity\n    const result = database.prepare('SELECT 1 as test').get() as { test: number } | undefined;\n    return result?.test === 1;\n  } catch (error) {\n    console.error('Database health check failed:', error);\n    return false;\n  }\n}\n\n// === BASIC ACTIVITY OPERATIONS ===\n\n/**\n * Inserts a new activity record into the database\n * \n * Creates a new activity entry with the provided information. Automatically\n * handles timestamp generation if not provided and validates required fields.\n * Uses prepared statements for optimal performance and security.\n * \n * @param activityData - Activity information to insert\n * @param activityData.appName - Name of the application\n * @param activityData.windowTitle - Title of the window\n * @param activityData.duration - Duration in seconds (optional, default: 0)\n * @param activityData.timestamp - When the activity occurred (optional, default: now)\n * @returns Promise resolving to the ID of the inserted record\n * \n * @throws {Error} If required fields are missing or database operation fails\n */\nexport async function insertActivity(activityData: {\n  appName: string;\n  windowTitle: string;\n  duration?: number;\n  timestamp?: Date;\n}): Promise<number> {\n  if (!database || !insertActivityStatement) {\n    throw new Error('Database not initialized');\n  }\n  \n  if (!activityData.appName || typeof activityData.appName !== 'string') {\n    throw new Error('App name is required and must be a string');\n  }\n  \n  try {\n    const timestamp = activityData.timestamp || new Date();\n    const duration = activityData.duration || 0;\n    \n    const result = insertActivityStatement.run(\n      timestamp.toISOString(),\n      activityData.appName,\n      activityData.windowTitle || '',\n      duration\n    );\n    \n    if (DEBUG_LOGGING) {\n      console.log(`Inserted activity: ${activityData.appName} (ID: ${result.lastInsertRowid})`);\n    }\n    \n    return Number(result.lastInsertRowid);\n  } catch (error) {\n    console.error('Failed to insert activity:', error);\n    throw new Error(`Failed to insert activity: ${error}`);\n  }\n}\n\n/**\n * Retrieves activity records from the database with pagination and filtering\n * \n * Fetches activity data based on the provided options. Supports pagination\n * through limit/offset and date range filtering. Results are ordered by\n * timestamp in descending order (most recent first).\n * \n * @param options - Query options for filtering and pagination\n * @param options.limit - Maximum number of records to return (default: 100)\n * @param options.offset - Number of records to skip (default: 0)\n * @param options.startDate - Filter activities after this date (optional)\n * @param options.endDate - Filter activities before this date (optional)\n * @returns Array of activity records matching the criteria\n * \n * @throws {Error} If database query fails\n */\nexport function getActivities(options: {\n  limit?: number;\n  offset?: number;\n  startDate?: Date;\n  endDate?: Date;\n} = {}): ActivityTableRow[] {\n  if (!database || !getActivitiesStatement) {\n    throw new Error('Database not initialized');\n  }\n  \n  try {\n    const {\n      limit = 100,\n      offset = 0,\n      startDate,\n      endDate\n    } = options;\n    \n    const startDateISO = startDate?.toISOString() || null;\n    const endDateISO = endDate?.toISOString() || null;\n    \n    const results = getActivitiesStatement.all(\n      startDateISO, startDateISO,\n      endDateISO, endDateISO,\n      limit, offset\n    ) as any[];\n    \n         return results.map(row => ({\n       id: row.id,\n       timestamp: row.timestamp, // Keep as ISO string as expected by ActivityTableRow\n       app_name: row.app_name,\n       window_title: row.window_title,\n       duration: row.duration,\n       created_at: row.created_at // Keep as ISO string as expected by ActivityTableRow\n     }));\n  } catch (error) {\n    console.error('Failed to get activities:', error);\n    throw new Error(`Failed to get activities: ${error}`);\n  }\n}\n\n/**\n * Gets the total count of activity records matching the given criteria\n * \n * Returns the number of activity records that match the optional date range\n * filter. Useful for pagination calculations and statistics.\n * \n * @param options - Query options for filtering\n * @param options.startDate - Count activities after this date (optional)\n * @param options.endDate - Count activities before this date (optional)\n * @returns Total number of matching activity records\n * \n * @throws {Error} If database query fails\n */\nexport function getActivityCount(options: {\n  startDate?: Date;\n  endDate?: Date;\n} = {}): number {\n  if (!database || !countActivitiesStatement) {\n    throw new Error('Database not initialized');\n  }\n  \n  try {\n    const { startDate, endDate } = options;\n    \n    const startDateISO = startDate?.toISOString() || null;\n    const endDateISO = endDate?.toISOString() || null;\n    \n    const result = countActivitiesStatement.get(\n      startDateISO, startDateISO,\n      endDateISO, endDateISO\n    ) as any;\n    \n    return result?.count || 0;\n  } catch (error) {\n    console.error('Failed to get activity count:', error);\n    throw new Error(`Failed to get activity count: ${error}`);\n  }\n}\n\n/**\n * Deletes activity records older than the specified date\n * \n * Removes old activity records to manage database size and maintain\n * performance. This is typically used for implementing data retention\n * policies based on user preferences.\n * \n * @param olderThan - Delete activities recorded before this date\n * @returns Promise resolving to number of records deleted\n * \n * @throws {Error} If database operation fails\n */\nexport async function deleteOldActivities(olderThan: Date): Promise<number> {\n  if (!database || !deleteOldActivitiesStatement) {\n    throw new Error('Database not initialized');\n  }\n  \n  try {\n    const result = deleteOldActivitiesStatement.run(olderThan.toISOString());\n    \n    if (DEBUG_LOGGING) {\n      console.log(`Deleted ${result.changes} old activities`);\n    }\n    \n    return result.changes || 0;\n  } catch (error) {\n    console.error('Failed to delete old activities:', error);\n    throw new Error(`Failed to delete old activities: ${error}`);\n  }\n}\n\n/**\n * Transforms database session rows to UI-friendly session data\n */\nfunction transformSessionData(rows: SessionTableRow[]): SessionData[] {\n  return rows.map(row => ({\n    id: row.id,\n    startTime: new Date(row.start_time),\n    endTime: new Date(row.end_time),\n    duration: row.duration,\n    sessionType: row.session_type,\n    confidenceScore: row.confidence_score,\n    userCorrected: row.user_corrected,\n    userFeedback: row.user_feedback,\n    activities: [], // Will be populated separately\n    createdAt: new Date(row.created_at),\n    updatedAt: new Date(row.updated_at)\n  }));\n}\n\n/**\n * Gets sessions by date range\n */\nexport function getSessionsByDate(request: GetSessionsByDateRequest): SessionData[] {\n  if (!database) {\n    throw new Error('Database not initialized');\n  }\n\n  try {\n    const { startDate, endDate, limit = 100 } = request;\n    \n    const stmt = database.prepare(`\n      SELECT * FROM sessions \n      WHERE start_time >= ? AND end_time <= ?\n      ORDER BY start_time DESC \n      LIMIT ?\n    `);\n    \n    const rows = stmt.all(startDate, endDate, limit) as SessionTableRow[];\n    const sessions = transformSessionData(rows);\n    \n    // Get activities for each session\n    for (const session of sessions) {\n      const activityStmt = database.prepare(`\n        SELECT * FROM activities \n        WHERE session_id = ?\n        ORDER BY timestamp ASC\n      `);\n      const activityRows = activityStmt.all(session.id) as ActivityTableRow[];\n      \n      session.activities = activityRows.map(row => ({\n        id: row.id,\n        timestamp: new Date(row.timestamp),\n        appName: row.app_name,\n        windowTitle: row.window_title,\n        duration: row.duration,\n        formattedDuration: formatDuration(row.duration),\n        sessionId: row.session_id,\n        isIdle: row.is_idle\n      }));\n    }\n    \n    return sessions;\n  } catch (error) {\n    console.error('Failed to get sessions by date:', error);\n    throw error;\n  }\n}\n\n/**\n * Updates an existing session\n */\nexport function updateSession(request: UpdateSessionRequest): void {\n  if (!database) {\n    throw new Error('Database not initialized');\n  }\n\n  try {\n    const { sessionId, sessionType, userFeedback, userCorrected } = request;\n    \n    const updates: string[] = [];\n    const values: any[] = [];\n    \n    if (sessionType !== undefined) {\n      updates.push('session_type = ?');\n      values.push(sessionType);\n    }\n    \n    if (userFeedback !== undefined) {\n      updates.push('user_feedback = ?');\n      values.push(userFeedback);\n    }\n    \n    if (userCorrected !== undefined) {\n      updates.push('user_corrected = ?');\n      // Convert boolean to integer for SQLite compatibility\n      values.push(userCorrected ? 1 : 0);\n    }\n    \n    if (updates.length === 0) {\n      return; // Nothing to update\n    }\n    \n    updates.push('updated_at = CURRENT_TIMESTAMP');\n    values.push(sessionId);\n    \n    const stmt = database.prepare(`\n      UPDATE sessions \n      SET ${updates.join(', ')}\n      WHERE id = ?\n    `);\n    \n    stmt.run(...values);\n  } catch (error) {\n    console.error('Failed to update session:', error);\n    throw error;\n  }\n}\n\n/**\n * Gets recent unclassified activities for session processing\n */\nexport function getUnclassifiedActivities(hours: number = 24): RawActivityData[] {\n  if (!database) {\n    throw new Error('Database not initialized');\n  }\n\n  try {\n    const cutoffTime = new Date(Date.now() - (hours * 60 * 60 * 1000));\n    \n    const stmt = database.prepare(`\n      SELECT * FROM activities \n      WHERE session_id IS NULL \n        AND timestamp >= ?\n        AND (is_idle IS NULL OR is_idle = FALSE)\n      ORDER BY timestamp ASC\n    `);\n    \n    const rows = stmt.all(cutoffTime.toISOString()) as ActivityTableRow[];\n    \n    return rows.map(row => ({\n      id: row.id,\n      timestamp: new Date(row.timestamp),\n      appName: row.app_name,\n      windowTitle: row.window_title,\n      duration: row.duration,\n      createdAt: new Date(row.created_at),\n      sessionId: row.session_id,\n      isIdle: row.is_idle\n    }));\n  } catch (error) {\n    console.error('Failed to get unclassified activities:', error);\n    throw error;\n  }\n}\n\n/**\n * Formats duration in milliseconds to human-readable string\n */\nfunction formatDuration(milliseconds: number): string {\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes % 60}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  } else {\n    return `${seconds}s`;\n  }\n}\n\n// === SETTINGS OPERATIONS ===\n\n/**\n * Gets user settings from database\n * \n * Retrieves all user settings from the user_settings table and returns\n * them as a structured object. Settings are stored as key-value pairs\n * in the database for flexibility.\n * \n * @returns Promise resolving to user settings object\n * @throws {Error} If database query fails\n */\nexport async function getUserSettings(): Promise<Record<string, any>> {\n  if (!database) {\n    throw new Error('Database not initialized');\n  }\n\n  try {\n    const stmt = database.prepare('SELECT key, value FROM user_settings');\n    const rows = stmt.all() as { key: string; value: string }[];\n    \n    const settings: Record<string, any> = {};\n    rows.forEach(row => {\n      try {\n        // Parse JSON values, fallback to string for simple values\n        settings[row.key] = JSON.parse(row.value);\n      } catch {\n        settings[row.key] = row.value;\n      }\n    });\n    \n    if (DEBUG_LOGGING) {\n      console.log('Retrieved user settings:', Object.keys(settings));\n    }\n    \n    return settings;\n  } catch (error) {\n    console.error('Failed to get user settings:', error);\n    throw new Error(`Failed to retrieve settings: ${error}`);\n  }\n}\n\n/**\n * Updates user settings in database\n * \n * Updates or inserts user settings into the user_settings table.\n * Settings values are JSON stringified for storage consistency.\n * \n * @param updates - Object containing settings to update\n * @returns Promise resolving when update is complete\n * @throws {Error} If database operation fails\n */\nexport async function updateUserSettings(updates: Record<string, any>): Promise<void> {\n  if (!database) {\n    throw new Error('Database not initialized');\n  }\n\n  try {\n    const updateStmt = database.prepare(`\n      INSERT OR REPLACE INTO user_settings (key, value, updated_at)\n      VALUES (?, ?, CURRENT_TIMESTAMP)\n    `);\n    \n    const transaction = database.transaction((settingsUpdates: Record<string, any>) => {\n      for (const [key, value] of Object.entries(settingsUpdates)) {\n        const jsonValue = JSON.stringify(value);\n        updateStmt.run(key, jsonValue);\n      }\n    });\n    \n    transaction(updates);\n    \n    if (DEBUG_LOGGING) {\n      console.log('Updated settings keys:', Object.keys(updates));\n    }\n  } catch (error) {\n    console.error('Failed to update user settings:', error);\n    throw new Error(`Failed to update settings: ${error}`);\n  }\n}\n\n/**\n * Resets all user settings to defaults\n * \n * Clears all settings from the user_settings table. The application\n * will fall back to default values defined in the settings store.\n * \n * @returns Promise resolving when reset is complete\n * @throws {Error} If database operation fails\n */\nexport async function resetUserSettings(): Promise<void> {\n  if (!database) {\n    throw new Error('Database not initialized');\n  }\n\n  try {\n    const deleteStmt = database.prepare('DELETE FROM user_settings');\n    deleteStmt.run();\n    \n    if (DEBUG_LOGGING) {\n      console.log('All user settings reset to defaults');\n    }\n  } catch (error) {\n    console.error('Failed to reset user settings:', error);\n    throw new Error(`Failed to reset settings: ${error}`);\n  }\n}\n\n/**\n * Clears all activity data from database\n * \n * Removes all activity logs and sessions from the database.\n * This is a destructive operation that cannot be undone.\n * \n * @returns Promise resolving to number of records deleted\n * @throws {Error} If database operation fails\n */\nexport async function clearAllActivityData(): Promise<{ activities: number; sessions: number }> {\n  if (!database) {\n    throw new Error('Database not initialized');\n  }\n\n  try {\n    const deleteActivitiesStmt = database.prepare('DELETE FROM activities');\n    const deleteSessionsStmt = database.prepare('DELETE FROM sessions');\n    \n    const transaction = database.transaction(() => {\n      const activitiesResult = deleteActivitiesStmt.run();\n      const sessionsResult = deleteSessionsStmt.run();\n      \n      return {\n        activities: activitiesResult.changes,\n        sessions: sessionsResult.changes\n      };\n    });\n    \n    const result = transaction();\n    \n    if (DEBUG_LOGGING) {\n      console.log(`Cleared ${result.activities} activities and ${result.sessions} sessions`);\n    }\n    \n    return result;\n  } catch (error) {\n    console.error('Failed to clear activity data:', error);\n    throw new Error(`Failed to clear activity data: ${error}`);\n  }\n}\n\n// === EXPORTS ===\n\nexport type { Database } from 'better-sqlite3'; ","/**\r\n * Activity Logger - System monitoring and activity data collection\r\n * \r\n * Monitors active windows and user activity on Windows systems. Captures\r\n * application usage data while respecting privacy settings and filtering\r\n * out sensitive information. Implements polling-based monitoring with\r\n * configurable intervals and robust error handling.\r\n * \r\n * @module ActivityLogger\r\n * @author FocusFlare Team\r\n * @since 0.1.0\r\n */\r\n\r\n/// <reference types=\"node\" />\r\n\r\nimport activeWin from 'active-win';\r\nimport { insertActivity } from '@/main/database/connection';\r\nimport {\r\n  DEFAULT_POLLING_INTERVAL,\r\n  MAX_MONITORING_RETRIES,\r\n  EXCLUDED_APPS,\r\n  EXCLUDED_TITLE_PATTERNS,\r\n  DEBUG_LOGGING,\r\n  ERROR_MESSAGES,\r\n  SUCCESS_MESSAGES\r\n} from '@/shared/constants/app-constants';\r\n\r\n// === TYPES ===\r\n\r\n/**\r\n * Active window information from system monitoring\r\n */\r\ninterface ActiveWindowInfo {\r\n  /** Application name */\r\n  appName: string;\r\n  /** Window title */\r\n  windowTitle: string;\r\n  /** Process ID */\r\n  processId: number;\r\n  /** Window bounds */\r\n  bounds: {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Activity session tracking for duration calculation\r\n */\r\ninterface ActivitySession {\r\n  /** Application name */\r\n  appName: string;\r\n  /** Window title */\r\n  windowTitle: string;\r\n  /** Session start time */\r\n  startTime: Date;\r\n  /** Last seen time */\r\n  lastSeen: Date;\r\n}\r\n\r\n// === STATE MANAGEMENT ===\r\n\r\n/** Current monitoring state */\r\nlet isMonitoring = false;\r\n\r\n/** Polling interval timer */\r\nlet pollingTimer: NodeJS.Timeout | null = null;\r\n\r\n/** Current polling interval in milliseconds */\r\nlet currentPollingInterval = DEFAULT_POLLING_INTERVAL;\r\n\r\n/** Current activity session */\r\nlet currentSession: ActivitySession | null = null;\r\n\r\n/** Retry counter for failed monitoring operations */\r\nlet retryCount = 0;\r\n\r\n// === PRIVACY FILTERING ===\r\n\r\n/**\r\n * Checks if an application should be excluded from tracking\r\n * \r\n * @param appName - Application name to check\r\n * @returns True if application should be excluded\r\n */\r\nfunction isAppExcluded(appName: string): boolean {\r\n  if (!appName) return true;\r\n  \r\n  const normalizedAppName = appName.toLowerCase();\r\n  return EXCLUDED_APPS.some(excludedApp => \r\n    normalizedAppName.includes(excludedApp.toLowerCase())\r\n  );\r\n}\r\n\r\n/**\r\n * Checks if a window title contains sensitive information\r\n * \r\n * @param windowTitle - Window title to check\r\n * @returns True if window title should be excluded\r\n */\r\nfunction isTitleExcluded(windowTitle: string): boolean {\r\n  if (!windowTitle) return false;\r\n  \r\n  const normalizedTitle = windowTitle.toLowerCase();\r\n  return EXCLUDED_TITLE_PATTERNS.some(pattern =>\r\n    normalizedTitle.includes(pattern.toLowerCase())\r\n  );\r\n}\r\n\r\n/**\r\n * Sanitizes window title for privacy\r\n * \r\n * @param windowTitle - Original window title\r\n * @param appName - Application name for context\r\n * @returns Sanitized window title\r\n */\r\nfunction sanitizeWindowTitle(windowTitle: string, appName: string): string {\r\n  if (!windowTitle) return '';\r\n  \r\n  // If title contains sensitive patterns, return generic title\r\n  if (isTitleExcluded(windowTitle)) {\r\n    return `${appName} - [Private]`;\r\n  }\r\n  \r\n  // Limit title length to prevent extremely long titles\r\n  const maxTitleLength = 100;\r\n  if (windowTitle.length > maxTitleLength) {\r\n    return windowTitle.substring(0, maxTitleLength) + '...';\r\n  }\r\n  \r\n  return windowTitle;\r\n}\r\n\r\n// === ACTIVITY MONITORING ===\r\n\r\n/**\r\n * Gets the currently active window information\r\n * \r\n * @returns Promise resolving to active window info or null if none\r\n */\r\nasync function getCurrentActiveWindow(): Promise<ActiveWindowInfo | null> {\r\n  try {\r\n    const activeWindow = await activeWin();\r\n    \r\n    if (!activeWindow) {\r\n      return null;\r\n    }\r\n    \r\n    return {\r\n      appName: activeWindow.owner?.name || 'Unknown',\r\n      windowTitle: activeWindow.title || '',\r\n      processId: activeWindow.owner?.processId || 0,\r\n      bounds: {\r\n        x: activeWindow.bounds?.x || 0,\r\n        y: activeWindow.bounds?.y || 0,\r\n        width: activeWindow.bounds?.width || 0,\r\n        height: activeWindow.bounds?.height || 0\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Failed to get active window:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Processes a new activity detection\r\n * \r\n * @param windowInfo - Current active window information\r\n */\r\nfunction processActivity(windowInfo: ActiveWindowInfo): void {\r\n  try {\r\n    const { appName, windowTitle } = windowInfo;\r\n    \r\n    // Skip excluded applications\r\n    if (isAppExcluded(appName)) {\r\n      if (DEBUG_LOGGING) {\r\n        console.log(`Skipping excluded app: ${appName}`);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    // Sanitize window title\r\n    const sanitizedTitle = sanitizeWindowTitle(windowTitle, appName);\r\n    \r\n    const now = new Date();\r\n    \r\n    // Check if this is a continuation of the current session\r\n    if (currentSession && \r\n        currentSession.appName === appName && \r\n        currentSession.windowTitle === sanitizedTitle) {\r\n      // Update last seen time\r\n      currentSession.lastSeen = now;\r\n      return;\r\n    }\r\n    \r\n    // End current session if it exists\r\n    if (currentSession) {\r\n      const sessionDuration = currentSession.lastSeen.getTime() - currentSession.startTime.getTime();\r\n      \r\n      // Only log sessions longer than 1 second\r\n      if (sessionDuration > 1000) {\r\n        insertActivity({\r\n          appName: currentSession.appName,\r\n          windowTitle: currentSession.windowTitle,\r\n          duration: sessionDuration,\r\n          timestamp: currentSession.startTime\r\n        });\r\n        \r\n        if (DEBUG_LOGGING) {\r\n          console.log(`Logged activity: ${currentSession.appName} - ${sessionDuration}ms`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Start new session\r\n    currentSession = {\r\n      appName,\r\n      windowTitle: sanitizedTitle,\r\n      startTime: now,\r\n      lastSeen: now\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to process activity:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Main monitoring loop that polls for active window changes\r\n */\r\nasync function monitoringLoop(): Promise<void> {\r\n  try {\r\n    const windowInfo = await getCurrentActiveWindow();\r\n    \r\n    if (windowInfo) {\r\n      processActivity(windowInfo);\r\n      // Reset retry count on successful operation\r\n      retryCount = 0;\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('Monitoring loop error:', error);\r\n    retryCount++;\r\n    \r\n    // Stop monitoring if too many consecutive failures\r\n    if (retryCount >= MAX_MONITORING_RETRIES) {\r\n      console.error(`Stopping monitoring after ${MAX_MONITORING_RETRIES} failures`);\r\n      await stopActivityLogging();\r\n      return;\r\n    }\r\n  }\r\n  \r\n  // Schedule next polling cycle\r\n  if (isMonitoring) {\r\n    pollingTimer = setTimeout(monitoringLoop, currentPollingInterval);\r\n  }\r\n}\r\n\r\n// === PUBLIC API ===\r\n\r\n/**\r\n * Starts activity logging with system monitoring\r\n * \r\n * Begins polling the active window and logging activity data to the database.\r\n * Implements retry logic and graceful error handling for monitoring failures.\r\n * \r\n * @param pollingInterval - Polling interval in milliseconds (optional)\r\n * @returns Promise resolving to true if monitoring started successfully\r\n */\r\nexport async function startActivityLogging(pollingInterval?: number): Promise<boolean> {\r\n  try {\r\n    if (isMonitoring) {\r\n      if (DEBUG_LOGGING) {\r\n        console.log('Activity logging already running');\r\n      }\r\n      return true;\r\n    }\r\n    \r\n    // Update polling interval if provided\r\n    if (pollingInterval && pollingInterval > 0) {\r\n      currentPollingInterval = pollingInterval;\r\n    }\r\n    \r\n    // Reset state\r\n    retryCount = 0;\r\n    currentSession = null;\r\n    isMonitoring = true;\r\n    \r\n    // Start monitoring loop\r\n    monitoringLoop();\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log(SUCCESS_MESSAGES.MONITORING_STARTED);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Failed to start activity logging:', error);\r\n    isMonitoring = false;\r\n    throw new Error(`${ERROR_MESSAGES.MONITORING_FAILED}: ${error}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Stops activity logging and system monitoring\r\n * \r\n * Gracefully stops the monitoring loop, finalizes any current session,\r\n * and cleans up resources.\r\n * \r\n * @returns Promise resolving when monitoring is stopped\r\n */\r\nexport async function stopActivityLogging(): Promise<void> {\r\n  try {\r\n    if (!isMonitoring) {\r\n      return;\r\n    }\r\n    \r\n    isMonitoring = false;\r\n    \r\n    // Clear polling timer\r\n    if (pollingTimer) {\r\n      clearTimeout(pollingTimer);\r\n      pollingTimer = null;\r\n    }\r\n    \r\n    // Finalize current session\r\n    if (currentSession) {\r\n      const sessionDuration = currentSession.lastSeen.getTime() - currentSession.startTime.getTime();\r\n      \r\n      if (sessionDuration > 1000) {\r\n        insertActivity({\r\n          appName: currentSession.appName,\r\n          windowTitle: currentSession.windowTitle,\r\n          duration: sessionDuration,\r\n          timestamp: currentSession.startTime\r\n        });\r\n      }\r\n      \r\n      currentSession = null;\r\n    }\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log(SUCCESS_MESSAGES.MONITORING_STOPPED);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error stopping activity logging:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the current monitoring status\r\n * \r\n * @returns True if monitoring is currently active\r\n */\r\nexport function isActivityLoggingActive(): boolean {\r\n  return isMonitoring;\r\n}\r\n\r\n/**\r\n * Updates the polling interval for system monitoring\r\n * \r\n * @param interval - New polling interval in milliseconds\r\n * @returns True if interval was updated successfully\r\n */\r\nexport function updatePollingInterval(interval: number): boolean {\r\n  if (interval < 1000 || interval > 30000) {\r\n    console.error('Invalid polling interval. Must be between 1000ms and 30000ms');\r\n    return false;\r\n  }\r\n  \r\n  currentPollingInterval = interval;\r\n  \r\n  if (DEBUG_LOGGING) {\r\n    console.log(`Polling interval updated to ${interval}ms`);\r\n  }\r\n  \r\n  return true;\r\n} ","/**\r\n * Activity Types - Shared type definitions for activity tracking data\r\n * \r\n * Contains all TypeScript interfaces and types used throughout FocusFlare\r\n * for activity logging, session classification, and data management.\r\n * These types are shared between main and renderer processes.\r\n * \r\n * @module ActivityTypes\r\n * @author FocusFlare Team\r\n * @since 0.1.0\r\n */\r\n\r\n// === CORE ACTIVITY DATA ===\r\n\r\n/**\r\n * Raw activity log entry captured from system monitoring\r\n */\r\nexport interface RawActivityData {\r\n  /** Unique identifier for the activity entry */\r\n  id: number;\r\n  /** Timestamp when the activity was recorded */\r\n  timestamp: Date;\r\n  /** Name of the application (e.g., \"Chrome\", \"VSCode\") */\r\n  appName: string;\r\n  /** Title of the active window */\r\n  windowTitle: string;\r\n  /** Duration of activity in milliseconds */\r\n  duration: number;\r\n  /** When this record was created in the database */\r\n  createdAt: Date;\r\n  /** Associated session ID (if classified) */\r\n  sessionId?: number;\r\n  /** Whether this activity represents idle time */\r\n  isIdle?: boolean;\r\n}\r\n\r\n/**\r\n * Processed activity data for UI display\r\n */\r\nexport interface ActivityData {\r\n  /** Unique identifier */\r\n  id: number;\r\n  /** When the activity occurred */\r\n  timestamp: Date;\r\n  /** Application name */\r\n  appName: string;\r\n  /** Window title (sanitized for privacy) */\r\n  windowTitle: string;\r\n  /** Duration in milliseconds */\r\n  duration: number;\r\n  /** Formatted duration string (e.g., \"5m 30s\") */\r\n  formattedDuration: string;\r\n  /** Application category (if known) */\r\n  category?: string;\r\n  /** Associated session ID (if classified) */\r\n  sessionId?: number;\r\n  /** Whether this activity represents idle time */\r\n  isIdle?: boolean;\r\n}\r\n\r\n// === SESSION CLASSIFICATION TYPES ===\r\n\r\n/**\r\n * Session types for AI classification\r\n */\r\nexport type SessionType = \r\n  | 'focused-work'\r\n  | 'research' \r\n  | 'entertainment'\r\n  | 'break'\r\n  | 'unclear';\r\n\r\n/**\r\n * Session classification result from AI\r\n */\r\nexport interface SessionClassification {\r\n  /** Classified session type */\r\n  type: SessionType;\r\n  /** AI confidence score (0-1) */\r\n  confidence: number;\r\n  /** AI reasoning for classification */\r\n  reasoning: string;\r\n}\r\n\r\n/**\r\n * Complete session data structure\r\n */\r\nexport interface SessionData {\r\n  /** Unique session identifier */\r\n  id: number;\r\n  /** Session start timestamp */\r\n  startTime: Date;\r\n  /** Session end timestamp */\r\n  endTime: Date;\r\n  /** Total session duration in milliseconds */\r\n  duration: number;\r\n  /** AI-classified session type */\r\n  sessionType: SessionType;\r\n  /** AI confidence score for classification */\r\n  confidenceScore: number;\r\n  /** Whether user has manually corrected the classification */\r\n  userCorrected: boolean;\r\n  /** Optional user feedback or context */\r\n  userFeedback?: string;\r\n  /** Activities included in this session */\r\n  activities: ActivityData[];\r\n  /** When this session was created */\r\n  createdAt: Date;\r\n  /** When this session was last updated */\r\n  updatedAt: Date;\r\n}\r\n\r\n/**\r\n * Session creation input data\r\n */\r\nexport interface CreateSessionData {\r\n  /** Session start timestamp */\r\n  startTime: Date;\r\n  /** Session end timestamp */\r\n  endTime: Date;\r\n  /** Total session duration in milliseconds */\r\n  duration: number;\r\n  /** AI-classified session type */\r\n  sessionType: SessionType;\r\n  /** AI confidence score for classification */\r\n  confidenceScore: number;\r\n  /** Optional user feedback or context */\r\n  userFeedback?: string;\r\n}\r\n\r\n// === AI INTEGRATION TYPES ===\r\n\r\n/**\r\n * AI feedback record for learning and improvement\r\n */\r\nexport interface AIFeedback {\r\n  /** Unique feedback identifier */\r\n  id: number;\r\n  /** Associated session ID */\r\n  sessionId: number;\r\n  /** Original AI classification */\r\n  originalClassification: SessionType;\r\n  /** User-corrected classification */\r\n  correctedClassification: SessionType;\r\n  /** Optional user context for the correction */\r\n  userContext?: string;\r\n  /** When this feedback was created */\r\n  createdAt: Date;\r\n}\r\n\r\n/**\r\n * Ollama API response format\r\n */\r\nexport interface OllamaResponse {\r\n  /** Response content */\r\n  response: string;\r\n  /** Whether the response is complete */\r\n  done: boolean;\r\n  /** Optional error message */\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Session classification request to AI\r\n */\r\nexport interface ClassificationRequest {\r\n  /** Activities to classify */\r\n  activities: RawActivityData[];\r\n  /** Additional context for classification */\r\n  context?: string;\r\n  /** Processing options */\r\n  options?: {\r\n    /** Batch size for processing */\r\n    batchSize?: number;\r\n    /** Include surrounding context */\r\n    includeContext?: boolean;\r\n  };\r\n}\r\n\r\n// === USER SETTINGS TYPES ===\r\n\r\n/**\r\n * User preference settings\r\n */\r\nexport interface UserSettings {\r\n  /** Work hours start time (HH:MM format) */\r\n  workHoursStart: string;\r\n  /** Work hours end time (HH:MM format) */\r\n  workHoursEnd: string;\r\n  /** Break duration in minutes */\r\n  breakDurationMinutes: number;\r\n  /** Daily focus session goal in minutes */\r\n  focusSessionGoalMinutes: number;\r\n  /** Theme preference */\r\n  themePreference: 'light' | 'dark' | 'system';\r\n  /** Whether notifications are enabled */\r\n  notificationsEnabled: boolean;\r\n  /** Whether morning nudge notifications are enabled */\r\n  morningNudgeEnabled: boolean;\r\n  /** Data retention period in days */\r\n  dataRetentionDays: number;\r\n  /** Whether AI classification is enabled */\r\n  aiClassificationEnabled: boolean;\r\n  /** Custom colors for session types */\r\n  sessionColors?: Record<SessionType, string>;\r\n}\r\n\r\n/**\r\n * Settings update payload\r\n */\r\nexport type SettingsUpdate = Partial<UserSettings>;\r\n\r\n// === DATABASE SCHEMA TYPES ===\r\n\r\n/**\r\n * Database row structure for activities table\r\n */\r\nexport interface ActivityTableRow {\r\n  id: number;\r\n  timestamp: string; // ISO string in database\r\n  app_name: string;\r\n  window_title: string;\r\n  duration: number;\r\n  created_at: string; // ISO string in database\r\n  session_id?: number;\r\n  is_idle?: boolean;\r\n}\r\n\r\n/**\r\n * Database row structure for sessions table\r\n */\r\nexport interface SessionTableRow {\r\n  id: number;\r\n  start_time: string; // ISO string in database\r\n  end_time: string; // ISO string in database\r\n  duration: number;\r\n  session_type: SessionType;\r\n  confidence_score: number;\r\n  user_corrected: boolean;\r\n  user_feedback?: string;\r\n  created_at: string; // ISO string in database\r\n  updated_at: string; // ISO string in database\r\n}\r\n\r\n/**\r\n * Database row structure for user_settings table\r\n */\r\nexport interface UserSettingsTableRow {\r\n  key: string;\r\n  value: string;\r\n  updated_at: string; // ISO string in database\r\n}\r\n\r\n/**\r\n * Database row structure for ai_feedback table\r\n */\r\nexport interface AIFeedbackTableRow {\r\n  id: number;\r\n  session_id: number;\r\n  original_classification: SessionType;\r\n  corrected_classification: SessionType;\r\n  user_context?: string;\r\n  created_at: string; // ISO string in database\r\n}\r\n\r\n// === IPC COMMUNICATION TYPES ===\r\n\r\n/**\r\n * IPC channel names for communication between main and renderer\r\n */\r\nexport const IPC_CHANNELS = {\r\n  // Activity data operations\r\n  GET_ACTIVITIES: 'activity:get-all',\r\n  GET_RECENT_ACTIVITIES: 'activity:get-recent',\r\n  GET_ACTIVITIES_BY_DATE: 'activity:get-by-date',\r\n  \r\n  // Session operations\r\n  GET_SESSIONS: 'session:get-all',\r\n  GET_SESSIONS_BY_DATE: 'session:get-by-date',\r\n  CREATE_SESSION: 'session:create',\r\n  UPDATE_SESSION: 'session:update',\r\n  DELETE_SESSION: 'session:delete',\r\n  CLASSIFY_SESSION: 'session:classify',\r\n  \r\n  // AI operations\r\n  SUBMIT_AI_FEEDBACK: 'ai:submit-feedback',\r\n  CHECK_OLLAMA_STATUS: 'ai:check-ollama',\r\n  \r\n  // Settings operations\r\n  GET_SETTINGS: 'settings:get',\r\n  UPDATE_SETTINGS: 'settings:update',\r\n  RESET_SETTINGS: 'settings:reset',\r\n  \r\n  // System operations\r\n  SHOW_DASHBOARD: 'system:show-dashboard',\r\n  HIDE_DASHBOARD: 'system:hide-dashboard',\r\n  GET_APP_VERSION: 'system:get-version',\r\n  \r\n  // Database operations\r\n  DB_HEALTH_CHECK: 'db:health-check'\r\n} as const;\r\n\r\n/**\r\n * Request payload for getting activities by date range\r\n */\r\nexport interface GetActivitiesByDateRequest {\r\n  /** Start date (ISO string) */\r\n  startDate: string;\r\n  /** End date (ISO string) */\r\n  endDate: string;\r\n  /** Maximum number of records to return */\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Request payload for getting recent activities\r\n */\r\nexport interface GetRecentActivitiesRequest {\r\n  /** Number of hours to look back */\r\n  hours: number;\r\n  /** Maximum number of records to return */\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Request payload for getting sessions by date range\r\n */\r\nexport interface GetSessionsByDateRequest {\r\n  /** Start date (ISO string) */\r\n  startDate: string;\r\n  /** End date (ISO string) */\r\n  endDate: string;\r\n  /** Maximum number of records to return */\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Request payload for session classification\r\n */\r\nexport interface ClassifySessionRequest {\r\n  /** Activities to classify into a session */\r\n  activities: RawActivityData[];\r\n  /** Additional context for classification */\r\n  context?: string;\r\n}\r\n\r\n/**\r\n * Request payload for updating a session\r\n */\r\nexport interface UpdateSessionRequest {\r\n  /** Session ID to update */\r\n  sessionId: number;\r\n  /** Updated session type */\r\n  sessionType?: SessionType;\r\n  /** User feedback or context */\r\n  userFeedback?: string;\r\n  /** Mark as user corrected */\r\n  userCorrected?: boolean;\r\n}\r\n\r\n// === UI STATE TYPES ===\r\n\r\n/**\r\n * Loading states for async operations\r\n */\r\nexport type LoadingState = 'idle' | 'loading' | 'success' | 'error';\r\n\r\n/**\r\n * Error information for failed operations\r\n */\r\nexport interface ErrorInfo {\r\n  /** Error message */\r\n  message: string;\r\n  /** Error code (if available) */\r\n  code?: string;\r\n  /** Timestamp when error occurred */\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Timeline visualization data point\r\n */\r\nexport interface TimelineDataPoint {\r\n  /** Time on timeline */\r\n  time: Date;\r\n  /** Session data for this time point */\r\n  session?: SessionData;\r\n  /** Whether this represents idle time */\r\n  isIdle: boolean;\r\n  /** Duration for this time segment */\r\n  duration: number;\r\n}\r\n\r\n/**\r\n * Session color configuration\r\n */\r\nexport interface SessionColorConfig {\r\n  /** Primary color for session type */\r\n  primary: string;\r\n  /** Secondary/background color */\r\n  secondary: string;\r\n  /** Text color that contrasts well */\r\n  text: string;\r\n}\r\n\r\n// === EXPORT TYPES ===\r\nexport type { }; ","/**\r\n * Ollama Client - Local AI integration for session classification\r\n * \r\n * Manages communication with the local Ollama instance for intelligent\r\n * session classification. Handles connection management, prompt templating,\r\n * batch processing, and error recovery. Uses Llama 3.2 3B model for\r\n * privacy-preserving local AI processing.\r\n * \r\n * @module OllamaClient\r\n * @author FocusFlare Team\r\n * @since 0.2.0\r\n */\r\n\r\nimport { \r\n  RawActivityData, \r\n  SessionClassification, \r\n  ClassificationRequest,\r\n  OllamaResponse \r\n} from '@/shared/types/activity-types';\r\n\r\n/** Debug logging flag - enable for development/testing */\r\nconst DEBUG_LOGGING = true;\r\n\r\n// === CONSTANTS ===\r\n\r\n/** Default Ollama server configuration */\r\nconst OLLAMA_CONFIG = {\r\n  baseUrl: 'http://127.0.0.1:11434',\r\n  model: 'llama3.2:3b',\r\n  timeout: 30000, // 30 seconds\r\n  maxRetries: 3,\r\n  retryDelay: 2000 // 2 seconds\r\n} as const;\r\n\r\n/** Classification prompt template */\r\nconst CLASSIFICATION_PROMPT = `You are an expert AI system for analyzing computer activity patterns. Your job is to classify work sessions with high accuracy using contextual clues and established patterns.\r\n\r\n=== CLASSIFICATION CATEGORIES ===\r\n\r\n🎯 focused-work (Concentrated productive work)\r\nKEY INDICATORS:\r\n• Code/development: VS Code, IntelliJ, GitHub, terminal, database tools\r\n• Document creation: Word, Google Docs, LaTeX, technical writing\r\n• Design work: Figma, Photoshop, CAD software, graphic design\r\n• Data analysis: Excel, SQL tools, analytics platforms, spreadsheets\r\n• Professional software: Industry-specific tools, business applications\r\n\r\nPATTERN RECOGNITION:\r\n• Single application focus >15 minutes OR multiple related tools\r\n• Deep engagement with minimal switching\r\n• Professional window titles (project names, file editing, dashboards)\r\n\r\nEXAMPLES:\r\n✅ \"VS Code - my-project.tsx\" + \"Chrome - GitHub Pull Request\" (45 min) = focused-work\r\n✅ \"Figma - Website Redesign\" (30 min) = focused-work  \r\n✅ \"Excel - Q4 Budget Analysis\" + \"Calculator\" (25 min) = focused-work\r\n\r\n🔍 research (Learning and information gathering)\r\nKEY INDICATORS:\r\n• Educational content: Stack Overflow, Wikipedia, documentation, tutorials\r\n• Technical resources: API docs, GitHub exploration, technical blogs\r\n• Learning platforms: Coursera, YouTube educational, PDF papers\r\n• Reference materials: Manuals, guides, troubleshooting, forums\r\n\r\nPATTERN RECOGNITION:\r\n• Active information seeking with clear learning intent\r\n• Movement between reference sources\r\n• Educational/technical window titles\r\n\r\nEXAMPLES:\r\n✅ \"Chrome - Stack Overflow React Hooks\" + \"Medium - TypeScript Tutorial\" = research\r\n✅ \"YouTube - Docker Container Tutorial\" + \"Chrome - Docker Documentation\" = research\r\n✅ \"PDF Reader - Machine Learning Paper.pdf\" (20 min) = research\r\n\r\n🎮 entertainment (Leisure and recreational)\r\nKEY INDICATORS:\r\n• Social media: Facebook, Instagram, Twitter, TikTok, Reddit (non-work)\r\n• Entertainment videos: YouTube fun content, Netflix, streaming\r\n• Gaming: Games, game platforms, gaming websites\r\n• Casual browsing: News, shopping, memes, personal interests\r\n\r\nPATTERN RECOGNITION:\r\n• Recreational content consumption\r\n• Non-work-related window titles\r\n• Casual, entertainment-focused activities\r\n\r\nEXAMPLES:\r\n✅ \"YouTube - Funny Cat Videos\" + \"Reddit - r/memes\" = entertainment\r\n✅ \"Netflix - TV Show\" (45 min) = entertainment\r\n✅ \"Instagram - Feed\" + \"Facebook - Social Posts\" = entertainment\r\n\r\n⏸️ break (Short pauses and personal tasks)\r\nKEY INDICATORS:\r\n• Very short activities (<2 min average per activity)\r\n• Frequent app switching (>3 different apps in <10 minutes)\r\n• Personal maintenance: Quick email, calendar check, messaging\r\n• System idle: Screen savers, lock screens, away from computer\r\n\r\nPATTERN RECOGNITION:\r\n• High switching frequency with low engagement\r\n• Brief, task-oriented activities\r\n• Clear break-like behavior patterns\r\n\r\nEXAMPLES:\r\n✅ \"Gmail - Quick Check\" (1 min) + \"Calendar - Today\" (30 sec) + \"Idle\" (5 min) = break\r\n✅ Multiple 30-second app switches across 5 different apps = break\r\n\r\n❓ unclear (Insufficient or genuinely ambiguous data)\r\nUSE WHEN:\r\n• Truly mixed signals with no dominant pattern\r\n• Generic system activities without clear context\r\n• Insufficient data to make confident determination\r\n• Activities that legitimately don't fit other categories\r\n\r\n=== ENHANCED ANALYSIS FRAMEWORK ===\r\n\r\nSTEP 1 - DURATION ANALYSIS:\r\n• <2 min average → likely break\r\n• 2-15 min → analyze context and switching patterns  \r\n• >15 min single focus → likely focused-work or research\r\n\r\nSTEP 2 - CONTEXT KEYWORD MATCHING:\r\nHigh-value indicators (prioritize these):\r\n• Stack Overflow, GitHub, documentation, Wikipedia → research\r\n• VS Code, IntelliJ, Figma, professional tools → focused-work\r\n• YouTube entertainment, social media, games, Netflix → entertainment\r\n• Spotify music, playlists (non-educational) → entertainment\r\n• Quick switching + short durations → break\r\n\r\nSTEP 3 - PATTERN ANALYSIS:\r\n• Deep focus (1-2 apps, long durations) → focused-work\r\n• Information seeking (multiple reference sources) → research  \r\n• Casual consumption (entertainment platforms, music) → entertainment\r\n• Rapid switching (many apps, short times) → break\r\n\r\nSTEP 4 - CONFIDENCE CALIBRATION:\r\n• 0.9-1.0: Perfect indicators, zero ambiguity (e.g., \"VS Code\" solo for 30min = focused-work)\r\n• 0.7-0.8: Strong indicators with minor ambiguity\r\n• 0.5-0.6: Mixed signals but one pattern dominates\r\n• 0.3-0.4: Weak indicators, mostly rule-based\r\n• 0.1-0.2: Very uncertain, use unclear\r\n\r\nSTEP 5 - ENTERTAINMENT VS RESEARCH CHECK:\r\n• Music/playlists without learning context = entertainment\r\n• YouTube without \"tutorial\", \"course\", \"learning\" = entertainment  \r\n• Social media browsing = entertainment\r\n• If genuinely mixed work+entertainment+unclear → use unclear\r\n\r\n=== SESSION DATA ===\r\nActivities: {activities}\r\nSession Duration: {duration} minutes  \r\nAdditional Context: {context}\r\nSession Start: {startTime}\r\n\r\n=== CRITICAL RULES ===\r\n1. NEVER default to entertainment when uncertain - use unclear instead\r\n2. research requires clear learning/information-seeking intent\r\n3. break is for short activities and high switching, not unclear content\r\n4. Consider the FULL context, not just individual app names\r\n5. Window titles are often more revealing than app names\r\n6. When genuinely mixed signals (work+entertainment, or work+break patterns) → use unclear\r\n7. Music/playlists are entertainment unless clearly educational/work-focused\r\n8. Be conservative with confidence - if in doubt, lower confidence or use unclear\r\n\r\n=== RESPONSE FORMAT ===\r\nRespond with ONLY this JSON format (no markdown, no extra text):\r\n{\"type\": \"focused-work\", \"confidence\": 0.8, \"reasoning\": \"Step-by-step analysis: [1] Duration: X minutes suggests Y. [2] Key indicators: specific apps/titles that led to decision. [3] Pattern: behavioral pattern observed. [4] Conclusion: final reasoning for classification.\"}\r\n\r\nThe type must be exactly one of: focused-work, research, entertainment, break, unclear\r\n\r\nAnalyze the session data above and classify it now:`;\r\n\r\n// === ERROR CLASSES ===\r\n\r\n/**\r\n * Custom error for Ollama connection issues\r\n */\r\nexport class OllamaConnectionError extends Error {\r\n  constructor(message: string, public readonly cause?: Error) {\r\n    super(message);\r\n    this.name = 'OllamaConnectionError';\r\n  }\r\n}\r\n\r\n/**\r\n * Custom error for classification failures\r\n */\r\nexport class ClassificationError extends Error {\r\n  constructor(message: string, public readonly cause?: Error) {\r\n    super(message);\r\n    this.name = 'ClassificationError';\r\n  }\r\n}\r\n\r\n// === CLIENT CLASS ===\r\n\r\n/**\r\n * Ollama client for local AI session classification\r\n */\r\nexport class OllamaClient {\r\n  private baseUrl: string;\r\n  private model: string;\r\n  private timeout: number;\r\n  private maxRetries: number;\r\n  private retryDelay: number;\r\n  private isConnected: boolean = false;\r\n  private lastHealthCheck: Date | null = null;\r\n\r\n  constructor(config: Partial<typeof OLLAMA_CONFIG> = {}) {\r\n    this.baseUrl = config.baseUrl ?? OLLAMA_CONFIG.baseUrl;\r\n    this.model = config.model ?? OLLAMA_CONFIG.model;\r\n    this.timeout = config.timeout ?? OLLAMA_CONFIG.timeout;\r\n    this.maxRetries = config.maxRetries ?? OLLAMA_CONFIG.maxRetries;\r\n    this.retryDelay = config.retryDelay ?? OLLAMA_CONFIG.retryDelay;\r\n  }\r\n\r\n  /**\r\n   * Checks if Ollama server is available and model is loaded\r\n   * \r\n   * @returns Promise resolving to true if Ollama is available\r\n   */\r\n  async checkHealth(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/api/tags`, {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        signal: AbortSignal.timeout(5000) // 5 second timeout for health check\r\n      });\r\n\r\n      if (!response.ok) {\r\n        this.isConnected = false;\r\n        return false;\r\n      }\r\n\r\n      const data = await response.json();\r\n      const modelExists = data.models?.some((model: any) => \r\n        model.name.includes(this.model.split(':')[0])\r\n      );\r\n\r\n      this.isConnected = modelExists;\r\n      this.lastHealthCheck = new Date();\r\n\r\n      if (DEBUG_LOGGING) {\r\n        console.log(`Ollama health check: ${this.isConnected ? 'OK' : 'FAILED'}`);\r\n      }\r\n\r\n      return this.isConnected;\r\n    } catch (error) {\r\n      this.isConnected = false;\r\n      if (DEBUG_LOGGING) {\r\n        console.warn('Ollama health check failed:', error);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyzes user feedback patterns to improve future classifications\r\n   * \r\n   * @param activities - Activity data for analysis\r\n   * @returns Enhanced context based on learned patterns\r\n   */\r\n  private async getLearnedContext(activities: RawActivityData[]): Promise<string> {\r\n    try {\r\n      // Get recent user corrections from database\r\n      const userFeedback = await this.getUserFeedbackPatterns();\r\n      \r\n      if (userFeedback.length === 0) {\r\n        return 'No learned patterns available yet';\r\n      }\r\n\r\n      const combinedText = activities.map(a => `${a.appName} ${a.windowTitle}`).join(' ').toLowerCase();\r\n      const relevantFeedback = this.findRelevantFeedback(userFeedback, combinedText);\r\n      \r\n      if (relevantFeedback.length === 0) {\r\n        return 'No similar patterns found in user feedback';\r\n      }\r\n\r\n      // Generate contextual insights from feedback\r\n      const insights = this.generateFeedbackInsights(relevantFeedback);\r\n      \r\n      return `Learned patterns: ${insights}`;\r\n    } catch (error) {\r\n      if (DEBUG_LOGGING) {\r\n        console.warn('Failed to get learned context:', error);\r\n      }\r\n      return 'Failed to retrieve learned patterns';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves user feedback patterns from database\r\n   * \r\n   * @returns Array of user feedback data\r\n   */\r\n  private async getUserFeedbackPatterns(): Promise<Array<{\r\n    originalClassification: string;\r\n    correctedClassification: string;\r\n    userContext: string;\r\n    activityPattern: string;\r\n    createdAt: Date;\r\n  }>> {\r\n    try {\r\n      const db = require('../database/connection').getDatabaseConnection();\r\n      \r\n      const query = `\r\n        SELECT \r\n          af.original_classification,\r\n          af.corrected_classification,\r\n          af.user_context,\r\n          s.session_type,\r\n          s.start_time,\r\n          s.end_time,\r\n          s.duration,\r\n          GROUP_CONCAT(a.app_name || '|' || a.window_title, ';;') as activity_pattern\r\n        FROM ai_feedback af\r\n        JOIN sessions s ON af.session_id = s.id\r\n        LEFT JOIN activities a ON a.session_id = s.id\r\n        WHERE af.created_at > datetime('now', '-30 days')\r\n        GROUP BY af.id\r\n        ORDER BY af.created_at DESC\r\n        LIMIT 50\r\n      `;\r\n      \r\n      const feedbackRows = db.prepare(query).all();\r\n      \r\n      return feedbackRows.map((row: any) => ({\r\n        originalClassification: row.original_classification,\r\n        correctedClassification: row.corrected_classification,\r\n        userContext: row.user_context || '',\r\n        activityPattern: row.activity_pattern || '',\r\n        createdAt: new Date(row.created_at || Date.now())\r\n      }));\r\n    } catch (error) {\r\n      if (DEBUG_LOGGING) {\r\n        console.warn('Failed to fetch user feedback:', error);\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds relevant feedback based on activity similarity\r\n   * \r\n   * @param userFeedback - All user feedback\r\n   * @param currentText - Current activity text to match\r\n   * @returns Relevant feedback entries\r\n   */\r\n  private findRelevantFeedback(\r\n    userFeedback: Array<{\r\n      originalClassification: string;\r\n      correctedClassification: string;\r\n      userContext: string;\r\n      activityPattern: string;\r\n      createdAt: Date;\r\n    }>,\r\n    currentText: string\r\n  ): typeof userFeedback {\r\n    const relevantFeedback = [];\r\n    \r\n    for (const feedback of userFeedback) {\r\n      const similarity = this.calculateTextSimilarity(currentText, feedback.activityPattern.toLowerCase());\r\n      \r\n      if (similarity > 0.3) { // 30% similarity threshold\r\n        relevantFeedback.push({\r\n          ...feedback,\r\n          similarity\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Sort by similarity and recency\r\n    return relevantFeedback\r\n      .sort((a, b) => {\r\n        const similarityDiff = (b.similarity || 0) - (a.similarity || 0);\r\n        if (Math.abs(similarityDiff) < 0.1) {\r\n          // If similarity is close, prefer more recent feedback\r\n          return b.createdAt.getTime() - a.createdAt.getTime();\r\n        }\r\n        return similarityDiff;\r\n      })\r\n      .slice(0, 5); // Top 5 most relevant\r\n  }\r\n\r\n  /**\r\n   * Calculates text similarity using keyword overlap\r\n   * \r\n   * @param text1 - First text\r\n   * @param text2 - Second text\r\n   * @returns Similarity score (0-1)\r\n   */\r\n  private calculateTextSimilarity(text1: string, text2: string): number {\r\n    const getKeywords = (text: string) => {\r\n      return text.split(/\\s+/)\r\n        .filter(word => word.length > 2)\r\n        .map(word => word.replace(/[^\\w]/g, ''));\r\n    };\r\n    \r\n    const keywords1 = new Set(getKeywords(text1));\r\n    const keywords2 = new Set(getKeywords(text2));\r\n    \r\n    const intersection = new Set(Array.from(keywords1).filter(x => keywords2.has(x)));\r\n    const union = new Set([...Array.from(keywords1), ...Array.from(keywords2)]);\r\n    \r\n    return union.size > 0 ? intersection.size / union.size : 0;\r\n  }\r\n\r\n  /**\r\n   * Generates insights from relevant user feedback\r\n   * \r\n   * @param relevantFeedback - Filtered user feedback\r\n   * @returns Human-readable insights\r\n   */\r\n  private generateFeedbackInsights(relevantFeedback: any[]): string {\r\n    const insights = [];\r\n    \r\n    // Pattern analysis\r\n    const corrections = relevantFeedback.map(f => ({\r\n      from: f.originalClassification,\r\n      to: f.correctedClassification,\r\n      context: f.userContext\r\n    }));\r\n    \r\n    // Common correction patterns\r\n    const correctionPatterns = new Map<string, number>();\r\n    corrections.forEach(correction => {\r\n      const key = `${correction.from}→${correction.to}`;\r\n      correctionPatterns.set(key, (correctionPatterns.get(key) || 0) + 1);\r\n    });\r\n    \r\n    // Most common corrections\r\n    const topCorrections = Array.from(correctionPatterns.entries())\r\n      .sort((a, b) => b[1] - a[1])\r\n      .slice(0, 3);\r\n    \r\n    if (topCorrections.length > 0) {\r\n      insights.push(`Common corrections: ${topCorrections.map(([pattern, count]) => `${pattern} (${count}x)`).join(', ')}`);\r\n    }\r\n    \r\n    // User context insights\r\n    const userContexts = relevantFeedback\r\n      .map(f => f.userContext)\r\n      .filter(context => context && context.length > 0);\r\n    \r\n    if (userContexts.length > 0) {\r\n      const contextKeywords = userContexts\r\n        .join(' ')\r\n        .split(/\\s+/)\r\n        .filter(word => word.length > 3)\r\n        .reduce((acc, word) => {\r\n          acc[word] = (acc[word] || 0) + 1;\r\n          return acc;\r\n        }, {} as Record<string, number>);\r\n      \r\n      const topContextKeywords = Object.entries(contextKeywords)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .slice(0, 3)\r\n        .map(([word]) => word);\r\n      \r\n      if (topContextKeywords.length > 0) {\r\n        insights.push(`User insights: ${topContextKeywords.join(', ')}`);\r\n      }\r\n    }\r\n    \r\n    // Recency insights\r\n    const recentCorrections = relevantFeedback.filter(f => \r\n      (Date.now() - f.createdAt.getTime()) < 7 * 24 * 60 * 60 * 1000 // Last 7 days\r\n    );\r\n    \r\n    if (recentCorrections.length > 0) {\r\n      insights.push(`Recent trend: ${recentCorrections.length} similar corrections in past week`);\r\n    }\r\n    \r\n    return insights.length > 0 ? insights.join('; ') : 'No clear patterns identified';\r\n  }\r\n\r\n  /**\r\n   * Classifies a batch of activities into session types\r\n   * \r\n   * @param request - Classification request with activities and options\r\n   * @returns Promise resolving to session classification results\r\n   * @throws {OllamaConnectionError} If Ollama is not available\r\n   * @throws {ClassificationError} If classification fails\r\n   */\r\n  async classifySession(request: ClassificationRequest): Promise<SessionClassification> {\r\n    // Check if Ollama is available\r\n    if (!this.isConnected || this.shouldCheckHealth()) {\r\n      const isHealthy = await this.checkHealth();\r\n      if (!isHealthy) {\r\n        throw new OllamaConnectionError(\r\n          'Ollama server is not available. Please ensure Ollama is running and the model is loaded.'\r\n        );\r\n      }\r\n    }\r\n\r\n    // Prepare activity summary for classification\r\n    const activitySummary = this.prepareActivitySummary(request.activities);\r\n    const duration = this.calculateSessionDuration(request.activities);\r\n    const context = request.context || 'No additional context provided';\r\n    const startTime = request.activities.length > 0 \r\n      ? new Date(request.activities[0].timestamp).toLocaleString() \r\n      : 'Unknown';\r\n    \r\n    // Get learned context from user feedback\r\n    const learnedContext = await this.getLearnedContext(request.activities);\r\n\r\n    const prompt = CLASSIFICATION_PROMPT\r\n      .replace('{activities}', activitySummary)\r\n      .replace('{duration}', duration.toString())\r\n      .replace('{context}', `${context}\\n\\nLearned Patterns: ${learnedContext}`)\r\n      .replace('{startTime}', startTime);\r\n\r\n    // Perform classification with retry logic\r\n    let lastError: Error | null = null;\r\n    \r\n    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {\r\n      try {\r\n        const classification = await this.performClassification(prompt);\r\n        \r\n        if (DEBUG_LOGGING) {\r\n          console.log(`Session classified as: ${classification.type} (confidence: ${classification.confidence})`);\r\n        }\r\n        \r\n        return classification;\r\n      } catch (error) {\r\n        lastError = error instanceof Error ? error : new Error(String(error));\r\n        \r\n        if (attempt < this.maxRetries) {\r\n          if (DEBUG_LOGGING) {\r\n            console.warn(`Classification attempt ${attempt} failed, retrying...`, error);\r\n          }\r\n          await this.delay(this.retryDelay);\r\n        }\r\n      }\r\n    }\r\n\r\n    throw new ClassificationError(\r\n      `Failed to classify session after ${this.maxRetries} attempts`,\r\n      lastError || undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Performs the actual classification request to Ollama\r\n   * \r\n   * @param prompt - Formatted prompt for classification\r\n   * @returns Promise resolving to session classification\r\n   * @throws {Error} If request fails or response is invalid\r\n   */\r\n  private async performClassification(prompt: string): Promise<SessionClassification> {\r\n    const requestBody = {\r\n      model: this.model,\r\n      prompt: prompt,\r\n      stream: false,\r\n      options: {\r\n        temperature: 0.4, // Balanced temperature for accuracy and creativity\r\n        top_k: 20,\r\n        top_p: 0.95\r\n      }\r\n    };\r\n\r\n    const response = await fetch(`${this.baseUrl}/api/generate`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(requestBody),\r\n      signal: AbortSignal.timeout(this.timeout)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data: OllamaResponse = await response.json();\r\n\r\n    if (data.error) {\r\n      throw new Error(`Ollama error: ${data.error}`);\r\n    }\r\n\r\n    // Parse the AI response\r\n    return this.parseClassificationResponse(data.response);\r\n  }\r\n\r\n  /**\r\n   * Parses AI response into structured classification data\r\n   * \r\n   * @param response - Raw AI response text\r\n   * @returns Parsed session classification\r\n   * @throws {Error} If response cannot be parsed\r\n   */\r\n  private parseClassificationResponse(response: string): SessionClassification {\r\n    try {\r\n      if (DEBUG_LOGGING) {\r\n        console.log('Raw AI response:', response);\r\n      }\r\n\r\n      // Clean up response - remove markdown code blocks and extra whitespace\r\n      let cleanResponse = response.trim()\r\n        .replace(/```json\\s*/gi, '')\r\n        .replace(/```\\s*/g, '')\r\n        .replace(/^\\s*[\\r\\n]+/gm, '');\r\n\r\n      // Try to extract JSON with proper matching\r\n      let jsonStr = '';\r\n      \r\n      // Look for JSON object\r\n      const jsonStart = cleanResponse.indexOf('{');\r\n      if (jsonStart === -1) {\r\n        throw new Error('No JSON object found in AI response');\r\n      }\r\n\r\n      // Find matching closing brace\r\n      let braceCount = 0;\r\n      let jsonEnd = -1;\r\n      \r\n      for (let i = jsonStart; i < cleanResponse.length; i++) {\r\n        if (cleanResponse[i] === '{') {\r\n          braceCount++;\r\n        } else if (cleanResponse[i] === '}') {\r\n          braceCount--;\r\n          if (braceCount === 0) {\r\n            jsonEnd = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (jsonEnd === -1) {\r\n        throw new Error('Unclosed JSON object in AI response');\r\n      }\r\n\r\n      jsonStr = cleanResponse.substring(jsonStart, jsonEnd + 1);\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log('Extracted JSON:', jsonStr);\r\n      }\r\n\r\n      const parsed = JSON.parse(jsonStr);\r\n\r\n      // Validate required fields\r\n      if (!parsed.type || typeof parsed.confidence !== 'number') {\r\n        throw new Error(`Invalid classification response format. Got: ${JSON.stringify(parsed)}`);\r\n      }\r\n\r\n      // Normalize and validate session type\r\n      const normalizedType = parsed.type.toLowerCase().trim();\r\n      const validTypes = ['focused-work', 'research', 'entertainment', 'break', 'unclear'];\r\n      \r\n      if (!validTypes.includes(normalizedType)) {\r\n        if (DEBUG_LOGGING) {\r\n          console.warn(`Invalid session type: \"${parsed.type}\" (normalized: \"${normalizedType}\"), defaulting to 'unclear'`);\r\n        }\r\n        return {\r\n          type: 'unclear',\r\n          confidence: Math.min(parsed.confidence || 0.1, 0.3),\r\n          reasoning: `Invalid type \"${parsed.type}\" - ${parsed.reasoning || 'No reasoning provided'}`\r\n        };\r\n      }\r\n\r\n      // Ensure confidence is within valid range\r\n      const confidence = Math.max(0, Math.min(1, parsed.confidence));\r\n\r\n      return {\r\n        type: normalizedType as SessionClassification['type'],\r\n        confidence,\r\n        reasoning: parsed.reasoning || 'No reasoning provided'\r\n      };\r\n    } catch (error) {\r\n      if (DEBUG_LOGGING) {\r\n        console.error('Failed to parse AI response:', error);\r\n        console.error('Response was:', response);\r\n      }\r\n      \r\n      // Return fallback classification\r\n      return {\r\n        type: 'unclear',\r\n        confidence: 0.1,\r\n        reasoning: `Failed to parse AI response: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepares activity data for AI analysis with enhanced context\r\n   * \r\n   * @param activities - Raw activity data\r\n   * @returns Formatted activity summary string with semantic context\r\n   */\r\n  private prepareActivitySummary(activities: RawActivityData[]): string {\r\n    if (activities.length === 0) {\r\n      return 'No activities recorded';\r\n    }\r\n\r\n    // Group consecutive activities in the same app to show patterns\r\n    const groupedActivities = this.groupConsecutiveActivities(activities);\r\n    \r\n    let summary = `Session contains ${activities.length} activities across ${new Set(activities.map(a => a.appName)).size} applications:\\n\\n`;\r\n    \r\n    groupedActivities.forEach((group, index) => {\r\n      const startTime = new Date(group.startTime).toLocaleTimeString();\r\n      const endTime = new Date(group.endTime).toLocaleTimeString();\r\n      const durationMinutes = Math.round(group.totalDuration / (1000 * 60));\r\n      const activityCount = group.activities.length;\r\n      \r\n      summary += `${index + 1}. ${startTime}-${endTime} (${durationMinutes}m) - ${group.appName}\\n`;\r\n      \r\n      // Add context clues from window titles\r\n      const contextClues = this.extractContextClues(group.activities);\r\n      if (contextClues.length > 0) {\r\n        summary += `   Context: ${contextClues.join(', ')}\\n`;\r\n      }\r\n      \r\n      // Show switching behavior for short activities\r\n      if (activityCount > 3 && group.totalDuration / activityCount < 60000) {\r\n        summary += `   Pattern: Frequent switching (${activityCount} windows, avg ${Math.round(group.totalDuration / activityCount / 1000)}s each)\\n`;\r\n      }\r\n      \r\n      summary += '\\n';\r\n    });\r\n\r\n    // Add session-level patterns\r\n    const sessionPatterns = this.analyzeSessionPatterns(activities);\r\n    if (sessionPatterns.length > 0) {\r\n      summary += `Session Patterns: ${sessionPatterns.join(', ')}\\n`;\r\n    }\r\n\r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Groups consecutive activities in the same application\r\n   */\r\n  private groupConsecutiveActivities(activities: RawActivityData[]): Array<{\r\n    appName: string;\r\n    startTime: Date;\r\n    endTime: Date;\r\n    totalDuration: number;\r\n    activities: RawActivityData[];\r\n  }> {\r\n    const groups: Array<{\r\n      appName: string;\r\n      startTime: Date;\r\n      endTime: Date;\r\n      totalDuration: number;\r\n      activities: RawActivityData[];\r\n    }> = [];\r\n\r\n    let currentGroup: RawActivityData[] = [];\r\n    let currentApp = '';\r\n\r\n    for (const activity of activities) {\r\n      if (activity.appName !== currentApp) {\r\n        // Save previous group\r\n        if (currentGroup.length > 0) {\r\n          groups.push(this.createActivityGroup(currentGroup));\r\n        }\r\n        // Start new group\r\n        currentGroup = [activity];\r\n        currentApp = activity.appName;\r\n      } else {\r\n        currentGroup.push(activity);\r\n      }\r\n    }\r\n\r\n    // Save final group\r\n    if (currentGroup.length > 0) {\r\n      groups.push(this.createActivityGroup(currentGroup));\r\n    }\r\n\r\n    return groups;\r\n  }\r\n\r\n  /**\r\n   * Creates an activity group from consecutive activities\r\n   */\r\n  private createActivityGroup(activities: RawActivityData[]) {\r\n    return {\r\n      appName: activities[0].appName,\r\n      startTime: new Date(activities[0].timestamp),\r\n      endTime: new Date(activities[activities.length - 1].timestamp),\r\n      totalDuration: activities.reduce((sum, a) => sum + a.duration, 0),\r\n      activities\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enhanced context clue extraction with semantic analysis\r\n   * \r\n   * @param activities - Activity group to analyze\r\n   * @returns Array of contextual clues for AI classification\r\n   */\r\n  private extractContextClues(activities: RawActivityData[]): string[] {\r\n    const clues: string[] = [];\r\n    const combinedText = activities.map(a => `${a.appName} ${a.windowTitle}`).join(' ').toLowerCase();\r\n    \r\n    // === WORK INDICATORS ===\r\n    const workKeywords = [\r\n      // Development\r\n      'github', 'git', 'pull request', 'commit', 'repository', 'code review',\r\n      'visual studio', 'intellij', 'sublime', 'atom', 'vscode', 'vs code',\r\n      'npm', 'node', 'typescript', 'javascript', 'python', 'java', 'react', 'vue', 'angular',\r\n      'terminal', 'command line', 'bash', 'powershell', 'cmd',\r\n      'database', 'sql', 'mongodb', 'postgres', 'mysql',\r\n      \r\n      // Business/Professional\r\n      'dashboard', 'analytics', 'metrics', 'report', 'presentation',\r\n      'meeting', 'calendar', 'schedule', 'appointment',\r\n      'project', 'task', 'deadline', 'milestone',\r\n      'client', 'customer', 'business', 'proposal', 'contract',\r\n      'budget', 'finance', 'expense', 'invoice',\r\n      \r\n      // Design/Creative\r\n      'figma', 'sketch', 'photoshop', 'illustrator', 'canva',\r\n      'design', 'mockup', 'wireframe', 'prototype', 'ui', 'ux',\r\n      \r\n      // Document/Content\r\n      'document', 'docs', 'word', 'excel', 'powerpoint', 'sheets', 'slides',\r\n      'writing', 'editing', 'draft', 'article', 'blog'\r\n    ];\r\n    \r\n    // === RESEARCH INDICATORS ===\r\n    const researchKeywords = [\r\n      // Educational Platforms\r\n      'stack overflow', 'stackoverflow', 'wikipedia', 'coursera', 'udemy', 'khan academy',\r\n      'tutorial', 'guide', 'how to', 'learn', 'course', 'lesson',\r\n      'documentation', 'docs', 'api', 'reference', 'manual',\r\n      \r\n      // Academic/Technical\r\n      'research', 'paper', 'study', 'analysis', 'academic', 'journal',\r\n      'arxiv', 'scholar', 'pubmed', 'ieee', 'acm',\r\n      'conference', 'symposium', 'workshop',\r\n      \r\n      // Information Seeking\r\n      'comparison', 'review', 'evaluation', 'benchmark',\r\n      'best practices', 'patterns', 'architecture', 'methodology',\r\n      'troubleshooting', 'debugging', 'solution', 'fix', 'error',\r\n      \r\n      // Learning Content\r\n      'webinar', 'lecture', 'seminar', 'training',\r\n      'certification', 'exam', 'quiz', 'test'\r\n    ];\r\n    \r\n    // === ENTERTAINMENT INDICATORS ===\r\n    const entertainmentKeywords = [\r\n      // Social Media\r\n      'facebook', 'instagram', 'twitter', 'tiktok', 'snapchat', 'linkedin personal',\r\n      'social', 'feed', 'timeline', 'post', 'story', 'reel',\r\n      \r\n      // Entertainment Content\r\n      'youtube entertainment', 'netflix', 'hulu', 'disney', 'prime video',\r\n      'twitch', 'streaming', 'stream', 'live', 'gaming', 'game',\r\n      'meme', 'funny', 'comedy', 'humor', 'viral',\r\n      'celebrity', 'gossip', 'entertainment news',\r\n      \r\n      // Leisure Activities\r\n      'shopping', 'amazon personal', 'ebay', 'store', 'cart',\r\n      'music', 'spotify personal', 'playlist', 'album', 'song',\r\n      'video', 'movie', 'tv show', 'series', 'episode',\r\n      'sports', 'news personal', 'weather', 'horoscope'\r\n    ];\r\n    \r\n    // === BREAK INDICATORS ===\r\n    const breakKeywords = [\r\n      'idle', 'screen saver', 'lock', 'away', 'break',\r\n      'quick check', 'brief', 'glance', 'peek',\r\n      'inbox check', 'notification', 'reminder',\r\n      'personal', 'family', 'friend', 'chat', 'message'\r\n    ];\r\n\r\n    // === CONTEXT ANALYSIS ===\r\n    \r\n    // Check for work patterns\r\n    const workMatches = workKeywords.filter(keyword => combinedText.includes(keyword));\r\n    if (workMatches.length > 0) {\r\n      clues.push(`Work indicators: ${workMatches.slice(0, 3).join(', ')}`);\r\n    }\r\n    \r\n    // Check for research patterns\r\n    const researchMatches = researchKeywords.filter(keyword => combinedText.includes(keyword));\r\n    if (researchMatches.length > 0) {\r\n      clues.push(`Learning/Research indicators: ${researchMatches.slice(0, 3).join(', ')}`);\r\n    }\r\n    \r\n    // Check for entertainment patterns\r\n    const entertainmentMatches = entertainmentKeywords.filter(keyword => combinedText.includes(keyword));\r\n    if (entertainmentMatches.length > 0) {\r\n      clues.push(`Entertainment indicators: ${entertainmentMatches.slice(0, 3).join(', ')}`);\r\n    }\r\n    \r\n    // Check for break patterns\r\n    const breakMatches = breakKeywords.filter(keyword => combinedText.includes(keyword));\r\n    if (breakMatches.length > 0) {\r\n      clues.push(`Break indicators: ${breakMatches.slice(0, 3).join(', ')}`);\r\n    }\r\n\r\n    // === BEHAVIORAL PATTERNS ===\r\n    \r\n    // Analyze file extensions for development work\r\n    const codeExtensions = ['.js', '.ts', '.tsx', '.jsx', '.py', '.java', '.cpp', '.cs', '.php', '.rb', '.go', '.rs', '.vue', '.svelte'];\r\n    const codeFileMatches = codeExtensions.filter(ext => combinedText.includes(ext));\r\n    if (codeFileMatches.length > 0) {\r\n      clues.push(`Code files: ${codeFileMatches.join(', ')}`);\r\n    }\r\n    \r\n    // Analyze educational content duration patterns\r\n    if (combinedText.includes('tutorial') || combinedText.includes('course')) {\r\n      const longDuration = activities.some(a => a.duration > 600000); // >10 minutes\r\n      if (longDuration) {\r\n        clues.push('Extended educational content (>10min)');\r\n      }\r\n    }\r\n    \r\n    // Analyze productivity app combinations\r\n    const productivityApps = ['vscode', 'intellij', 'figma', 'photoshop', 'excel', 'word'];\r\n    const productivityCount = productivityApps.filter(app => combinedText.includes(app)).length;\r\n    if (productivityCount >= 2) {\r\n      clues.push('Multiple productivity tools used');\r\n    }\r\n    \r\n    // Analyze browser context\r\n    if (combinedText.includes('chrome') || combinedText.includes('firefox') || combinedText.includes('edge')) {\r\n      if (researchMatches.length > entertainmentMatches.length) {\r\n        clues.push('Browser: Research-oriented');\r\n      } else if (entertainmentMatches.length > researchMatches.length) {\r\n        clues.push('Browser: Entertainment-oriented');\r\n      } else if (workMatches.length > 0) {\r\n        clues.push('Browser: Work-related');\r\n      }\r\n    }\r\n\r\n    // === TEMPORAL PATTERNS ===\r\n    \r\n    const totalDuration = activities.reduce((sum, a) => sum + a.duration, 0);\r\n    const avgDuration = totalDuration / activities.length;\r\n    \r\n    if (avgDuration < 120000) { // <2 minutes average\r\n      clues.push('Very short activities (avg <2min)');\r\n    } else if (avgDuration > 900000) { // >15 minutes average\r\n      clues.push('Extended focus sessions (avg >15min)');\r\n    }\r\n    \r\n    // Check for rapid switching behavior\r\n    if (activities.length > 3 && avgDuration < 300000) { // >3 activities, <5min avg\r\n      clues.push('Rapid app switching pattern');\r\n    }\r\n\r\n    // === DOMAIN-SPECIFIC CONTEXT ===\r\n    \r\n    // GitHub/Git activity context\r\n    if (combinedText.includes('github') || combinedText.includes('git')) {\r\n      if (combinedText.includes('pull request') || combinedText.includes('commit') || combinedText.includes('merge')) {\r\n        clues.push('Active code collaboration');\r\n      } else {\r\n        clues.push('Code repository browsing');\r\n      }\r\n    }\r\n    \r\n    // YouTube context analysis\r\n    if (combinedText.includes('youtube')) {\r\n      if (combinedText.includes('tutorial') || combinedText.includes('course') || combinedText.includes('learn')) {\r\n        clues.push('Educational video content');\r\n      } else if (combinedText.includes('music') || combinedText.includes('playlist')) {\r\n        clues.push('Background music/audio');\r\n      } else {\r\n        clues.push('General video consumption');\r\n      }\r\n    }\r\n    \r\n    // Document editing context\r\n    if (combinedText.includes('word') || combinedText.includes('docs') || combinedText.includes('document')) {\r\n      if (combinedText.includes('project') || combinedText.includes('proposal') || combinedText.includes('report')) {\r\n        clues.push('Professional document work');\r\n      } else {\r\n        clues.push('General document editing');\r\n      }\r\n    }\r\n\r\n    return clues.slice(0, 8); // Limit to most relevant clues\r\n  }\r\n\r\n  /**\r\n   * Analyzes overall session patterns with classification hints\r\n   */\r\n  private analyzeSessionPatterns(activities: RawActivityData[]): string[] {\r\n    const patterns: string[] = [];\r\n    \r\n    // Duration analysis (critical for break detection)\r\n    const avgDuration = activities.reduce((sum, a) => sum + a.duration, 0) / activities.length;\r\n    const avgDurationSeconds = avgDuration / 1000;\r\n    const avgDurationMinutes = avgDuration / (1000 * 60);\r\n    \r\n    if (avgDurationSeconds < 120) {\r\n      patterns.push('⚡ BREAK PATTERN: Very short activities (avg ' + Math.round(avgDurationSeconds) + 's each)');\r\n    } else if (avgDurationMinutes < 5) {\r\n      patterns.push('⚡ BREAK PATTERN: Short activities (avg ' + Math.round(avgDurationMinutes) + 'm each)');\r\n    } else if (avgDurationMinutes > 15) {\r\n      patterns.push('🎯 FOCUS PATTERN: Sustained activities (avg ' + Math.round(avgDurationMinutes) + 'm each)');\r\n    }\r\n    \r\n    // App switching analysis (critical for break detection)\r\n    const uniqueApps = new Set(activities.map(a => a.appName)).size;\r\n    const switchingRate = uniqueApps / activities.length;\r\n    \r\n    if (switchingRate > 0.7) {\r\n      patterns.push('⚡ BREAK PATTERN: Frequent app switching (' + uniqueApps + ' apps in ' + activities.length + ' activities)');\r\n    } else if (uniqueApps === 1) {\r\n      patterns.push('🎯 FOCUS PATTERN: Single application focus');\r\n    } else if (uniqueApps <= 3) {\r\n      patterns.push('📚 RESEARCH PATTERN: Limited app set, focused browsing');\r\n    }\r\n    \r\n    // Session duration analysis\r\n    const timestamps = activities.map(a => new Date(a.timestamp));\r\n    const sessionDuration = timestamps[timestamps.length - 1].getTime() - timestamps[0].getTime();\r\n    const sessionMinutes = sessionDuration / (1000 * 60);\r\n    \r\n    if (sessionMinutes < 10) {\r\n      patterns.push('⚡ BREAK PATTERN: Very short session (' + Math.round(sessionMinutes) + 'm total)');\r\n    } else if (sessionMinutes > 120) {\r\n      patterns.push('🎯 FOCUS PATTERN: Extended session (' + Math.round(sessionMinutes) + 'm total)');\r\n    }\r\n    \r\n    // Activity type clustering\r\n    const hasSystemIdle = activities.some(a => \r\n      a.appName.toLowerCase().includes('idle') || \r\n      a.windowTitle.toLowerCase().includes('idle') ||\r\n      a.windowTitle.toLowerCase().includes('screen')\r\n    );\r\n    if (hasSystemIdle) {\r\n      patterns.push('⚡ BREAK PATTERN: System idle time detected');\r\n    }\r\n    \r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Calculates total session duration in minutes\r\n   * \r\n   * @param activities - Activity data array\r\n   * @returns Total duration in minutes\r\n   */\r\n  private calculateSessionDuration(activities: RawActivityData[]): number {\r\n    const totalMs = activities.reduce((sum, activity) => sum + activity.duration, 0);\r\n    return Math.round(totalMs / (1000 * 60));\r\n  }\r\n\r\n  /**\r\n   * Determines if a health check is needed\r\n   * \r\n   * @returns True if health check should be performed\r\n   */\r\n  private shouldCheckHealth(): boolean {\r\n    if (!this.lastHealthCheck) return true;\r\n    \r\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n    return this.lastHealthCheck < fiveMinutesAgo;\r\n  }\r\n\r\n  /**\r\n   * Utility function for adding delays between retries\r\n   * \r\n   * @param ms - Delay in milliseconds\r\n   * @returns Promise that resolves after delay\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Gets current connection status\r\n   * \r\n   * @returns Current connection status\r\n   */\r\n  getConnectionStatus(): { \r\n    isConnected: boolean; \r\n    lastHealthCheck: Date | null;\r\n    model: string;\r\n  } {\r\n    return {\r\n      isConnected: this.isConnected,\r\n      lastHealthCheck: this.lastHealthCheck,\r\n      model: this.model\r\n    };\r\n  }\r\n}\r\n\r\n// === SINGLETON INSTANCE ===\r\n\r\n/** Global Ollama client instance */\r\nlet ollamaClient: OllamaClient | null = null;\r\n\r\n/**\r\n * Gets or creates the global Ollama client instance\r\n * \r\n * @param config - Optional configuration override\r\n * @returns Ollama client instance\r\n */\r\nexport function getOllamaClient(config?: Partial<typeof OLLAMA_CONFIG>): OllamaClient {\r\n  if (!ollamaClient || config) {\r\n    ollamaClient = new OllamaClient(config);\r\n  }\r\n  return ollamaClient;\r\n}\r\n\r\n/**\r\n * Convenience function for checking Ollama availability\r\n * \r\n * @returns Promise resolving to true if Ollama is available\r\n */\r\nexport async function checkOllamaStatus(): Promise<boolean> {\r\n  const client = getOllamaClient();\r\n  return await client.checkHealth();\r\n}\r\n\r\n/**\r\n * Convenience function for session classification\r\n * \r\n * @param activities - Activities to classify\r\n * @param context - Optional context for classification\r\n * @returns Promise resolving to session classification\r\n */\r\nexport async function classifyActivities(\r\n  activities: RawActivityData[], \r\n  context?: string\r\n): Promise<SessionClassification> {\r\n  const client = getOllamaClient();\r\n  return await client.classifySession({ activities, context });\r\n} ","/**\r\n * Session Classifier - Transform raw activities into meaningful work sessions\r\n * \r\n * Processes raw activity logs into intelligent session groupings using idle\r\n * detection, temporal clustering, and AI classification. Handles session\r\n * boundary detection, duration calculation, and persistence. Core component\r\n * for Phase 2 MVP session management functionality.\r\n * \r\n * @module SessionClassifier\r\n * @author FocusFlare Team\r\n * @since 0.2.0\r\n */\r\n\r\nimport type { \r\n  RawActivityData, \r\n  SessionData, \r\n  CreateSessionData, \r\n  SessionType \r\n} from '@/shared/types/activity-types';\r\nimport { classifyActivities } from './ollama-client';\r\nimport { getDatabaseConnection } from '../database/connection';\r\nimport { DEBUG_LOGGING } from '@/shared/constants/app-constants';\r\n\r\n// === CONSTANTS ===\r\n\r\n/** Session processing configuration */\r\nconst SESSION_CONFIG = {\r\n  /** Maximum idle time before creating new session (milliseconds) */\r\n  maxIdleGap: 10 * 60 * 1000, // 10 minutes\r\n  /** Minimum session duration to classify (milliseconds) */\r\n  minSessionDuration: 2 * 60 * 1000, // 2 minutes\r\n  /** Maximum session duration before splitting (milliseconds) */\r\n  maxSessionDuration: 4 * 60 * 60 * 1000, // 4 hours\r\n  /** Minimum activities required for AI classification */\r\n  minActivitiesForAI: 3,\r\n  /** Batch size for processing activities */\r\n  batchSize: 50\r\n} as const;\r\n\r\n// === INTERFACES ===\r\n\r\n/**\r\n * Session boundary data\r\n */\r\ninterface SessionBoundary {\r\n  startTime: Date;\r\n  endTime: Date;\r\n  activities: RawActivityData[];\r\n}\r\n\r\n/**\r\n * Session processing options\r\n */\r\ninterface ProcessingOptions {\r\n  /** Whether to use AI classification */\r\n  useAI?: boolean;\r\n  /** Custom session configuration */\r\n  config?: Partial<typeof SESSION_CONFIG>;\r\n  /** Additional context for AI classification */\r\n  context?: string;\r\n}\r\n\r\n/**\r\n * Processing statistics\r\n */\r\ninterface ProcessingStats {\r\n  totalActivities: number;\r\n  sessionsCreated: number;\r\n  sessionsClassified: number;\r\n  aiFailures: number;\r\n  processingTime: number;\r\n}\r\n\r\n// === SESSION PROCESSOR CLASS ===\r\n\r\n/**\r\n * Session classifier for transforming activities into sessions\r\n */\r\nexport class SessionClassifier {\r\n  private config: typeof SESSION_CONFIG;\r\n  private db: any;\r\n\r\n  constructor(options: ProcessingOptions = {}) {\r\n    this.config = { ...SESSION_CONFIG, ...options.config };\r\n    this.db = getDatabaseConnection();\r\n  }\r\n\r\n  /**\r\n   * Processes raw activities into classified sessions\r\n   * \r\n   * @param activities - Raw activity data to process\r\n   * @param options - Processing options\r\n   * @returns Promise resolving to processing statistics\r\n   */\r\n  async processActivities(\r\n    activities: RawActivityData[], \r\n    options: ProcessingOptions = {}\r\n  ): Promise<ProcessingStats> {\r\n    const startTime = Date.now();\r\n    const stats: ProcessingStats = {\r\n      totalActivities: activities.length,\r\n      sessionsCreated: 0,\r\n      sessionsClassified: 0,\r\n      aiFailures: 0,\r\n      processingTime: 0\r\n    };\r\n\r\n    if (activities.length === 0) {\r\n      stats.processingTime = Date.now() - startTime;\r\n      return stats;\r\n    }\r\n\r\n    try {\r\n      // Sort activities by timestamp\r\n      const sortedActivities = activities.sort((a, b) => \r\n        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n      );\r\n\r\n      // Detect session boundaries\r\n      const sessionBoundaries = this.detectSessionBoundaries(sortedActivities);\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log(`Detected ${sessionBoundaries.length} session boundaries`);\r\n      }\r\n\r\n      // Process each session boundary\r\n      for (const boundary of sessionBoundaries) {\r\n        try {\r\n          const session = await this.createSession(boundary, options);\r\n          if (session) {\r\n            stats.sessionsCreated++;\r\n            if (session.sessionType !== 'unclear') {\r\n              stats.sessionsClassified++;\r\n            }\r\n          }\r\n        } catch (error) {\r\n          if (DEBUG_LOGGING) {\r\n            console.warn('Failed to create session:', error);\r\n          }\r\n          stats.aiFailures++;\r\n        }\r\n      }\r\n\r\n      stats.processingTime = Date.now() - startTime;\r\n\r\n      if (DEBUG_LOGGING) {\r\n        console.log('Session processing complete:', stats);\r\n      }\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      stats.processingTime = Date.now() - startTime;\r\n      console.error('Session processing failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detects session boundaries based on temporal gaps and activity patterns\r\n   * \r\n   * @param activities - Sorted activity data\r\n   * @returns Array of session boundaries\r\n   */\r\n  private detectSessionBoundaries(activities: RawActivityData[]): SessionBoundary[] {\r\n    const boundaries: SessionBoundary[] = [];\r\n    let currentSession: RawActivityData[] = [];\r\n    let sessionStartTime: Date | null = null;\r\n\r\n    for (let i = 0; i < activities.length; i++) {\r\n      const activity = activities[i];\r\n      const activityTime = new Date(activity.timestamp);\r\n\r\n      // Initialize first session\r\n      if (!sessionStartTime) {\r\n        sessionStartTime = activityTime;\r\n        currentSession = [activity];\r\n        continue;\r\n      }\r\n\r\n      // Check for session boundary conditions\r\n      const shouldCreateBoundary = this.shouldCreateSessionBoundary(\r\n        currentSession,\r\n        activity,\r\n        sessionStartTime\r\n      );\r\n\r\n      if (shouldCreateBoundary) {\r\n        // Create boundary for current session\r\n        if (currentSession.length > 0) {\r\n          const lastActivity = currentSession[currentSession.length - 1];\r\n          boundaries.push({\r\n            startTime: sessionStartTime,\r\n            endTime: new Date(lastActivity.timestamp),\r\n            activities: [...currentSession]\r\n          });\r\n        }\r\n\r\n        // Start new session\r\n        sessionStartTime = activityTime;\r\n        currentSession = [activity];\r\n      } else {\r\n        // Add to current session\r\n        currentSession.push(activity);\r\n      }\r\n    }\r\n\r\n    // Create final boundary\r\n    if (currentSession.length > 0 && sessionStartTime) {\r\n      const lastActivity = currentSession[currentSession.length - 1];\r\n      boundaries.push({\r\n        startTime: sessionStartTime,\r\n        endTime: new Date(lastActivity.timestamp),\r\n        activities: currentSession\r\n      });\r\n    }\r\n\r\n    return boundaries.filter(boundary => \r\n      this.isValidSessionBoundary(boundary)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if a session boundary should be created\r\n   * \r\n   * @param currentSession - Current session activities\r\n   * @param nextActivity - Next activity to consider\r\n   * @param sessionStartTime - When current session started\r\n   * @returns True if boundary should be created\r\n   */\r\n  private shouldCreateSessionBoundary(\r\n    currentSession: RawActivityData[],\r\n    nextActivity: RawActivityData,\r\n    sessionStartTime: Date\r\n  ): boolean {\r\n    if (currentSession.length === 0) return false;\r\n\r\n    const lastActivity = currentSession[currentSession.length - 1];\r\n    const lastActivityTime = new Date(lastActivity.timestamp);\r\n    const nextActivityTime = new Date(nextActivity.timestamp);\r\n    const sessionDuration = nextActivityTime.getTime() - sessionStartTime.getTime();\r\n\r\n    // Create boundary if idle gap is too large\r\n    const idleGap = nextActivityTime.getTime() - lastActivityTime.getTime();\r\n    if (idleGap > this.config.maxIdleGap) {\r\n      return true;\r\n    }\r\n\r\n    // Create boundary if session is too long\r\n    if (sessionDuration > this.config.maxSessionDuration) {\r\n      return true;\r\n    }\r\n\r\n    // Create boundary if there's a significant context switch\r\n    if (this.isSignificantContextSwitch(lastActivity, nextActivity)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if there's a significant context switch between activities\r\n   * \r\n   * @param lastActivity - Previous activity\r\n   * @param nextActivity - Next activity\r\n   * @returns True if significant context switch detected\r\n   */\r\n  private isSignificantContextSwitch(\r\n    lastActivity: RawActivityData, \r\n    nextActivity: RawActivityData\r\n  ): boolean {\r\n    // Different applications might indicate context switch\r\n    if (lastActivity.appName !== nextActivity.appName) {\r\n      // Some app switches are not significant (e.g., notifications)\r\n      const nonSignificantApps = ['Explorer', 'Taskbar', 'Desktop'];\r\n      const isLastSignificant = !nonSignificantApps.includes(lastActivity.appName);\r\n      const isNextSignificant = !nonSignificantApps.includes(nextActivity.appName);\r\n      \r\n      return isLastSignificant && isNextSignificant;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Validates if a session boundary meets minimum requirements\r\n   * \r\n   * @param boundary - Session boundary to validate\r\n   * @returns True if boundary is valid\r\n   */\r\n  private isValidSessionBoundary(boundary: SessionBoundary): boolean {\r\n    // Minimum duration check\r\n    const duration = boundary.endTime.getTime() - boundary.startTime.getTime();\r\n    if (duration < this.config.minSessionDuration) {\r\n      return false;\r\n    }\r\n\r\n    // Minimum activities check\r\n    if (boundary.activities.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Creates a session from a boundary with AI classification\r\n   * \r\n   * @param boundary - Session boundary data\r\n   * @param options - Processing options\r\n   * @returns Promise resolving to created session or null\r\n   */\r\n  private async createSession(\r\n    boundary: SessionBoundary, \r\n    options: ProcessingOptions\r\n  ): Promise<SessionData | null> {\r\n    try {\r\n      const duration = boundary.endTime.getTime() - boundary.startTime.getTime();\r\n      \r\n      // Determine session type\r\n      let sessionType: SessionType = 'unclear';\r\n      let confidence = 0.0;\r\n      let reasoning = 'Not classified';\r\n\r\n      const useAI = options.useAI !== false; // Default to true\r\n      const hasEnoughActivities = boundary.activities.length >= this.config.minActivitiesForAI;\r\n\r\n      if (useAI && hasEnoughActivities) {\r\n        try {\r\n          const classification = await classifyActivities(\r\n            boundary.activities, \r\n            options.context\r\n          );\r\n          \r\n          sessionType = classification.type;\r\n          confidence = classification.confidence;\r\n          reasoning = classification.reasoning;\r\n        } catch (error) {\r\n          if (DEBUG_LOGGING) {\r\n            console.warn('AI classification failed, using fallback:', error);\r\n          }\r\n          // Fall back to rule-based classification\r\n          sessionType = this.fallbackClassification(boundary.activities);\r\n          confidence = 0.3;\r\n          reasoning = `Rule-based classification: ${this.generateFallbackReasoning(boundary.activities)}`;\r\n        }\r\n      } else {\r\n        // Use rule-based classification\r\n        sessionType = this.fallbackClassification(boundary.activities);\r\n        confidence = 0.3;\r\n        reasoning = `Rule-based classification: ${this.generateFallbackReasoning(boundary.activities)}`;\r\n      }\r\n\r\n      // Create session data\r\n      const sessionData: CreateSessionData = {\r\n        startTime: boundary.startTime,\r\n        endTime: boundary.endTime,\r\n        duration,\r\n        sessionType,\r\n        confidenceScore: confidence,\r\n        userFeedback: reasoning\r\n      };\r\n\r\n      // Save to database\r\n      const sessionId = await this.saveSession(sessionData);\r\n      \r\n      // Update activities with session ID\r\n      await this.linkActivitiesToSession(boundary.activities, sessionId);\r\n\r\n      // Convert activities for response\r\n      const processedActivities = boundary.activities.map(activity => ({\r\n        ...activity,\r\n        sessionId,\r\n        formattedDuration: this.formatDuration(activity.duration),\r\n        category: this.getAppCategory(activity.appName)\r\n      }));\r\n\r\n      return {\r\n        id: sessionId,\r\n        startTime: boundary.startTime,\r\n        endTime: boundary.endTime,\r\n        duration,\r\n        sessionType,\r\n        confidenceScore: confidence,\r\n        userCorrected: false,\r\n        userFeedback: reasoning,\r\n        activities: processedActivities,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to create session:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enhanced rule-based fallback classification with sophisticated scoring\r\n   * \r\n   * @param activities - Activities to classify\r\n   * @returns Fallback session type with improved accuracy\r\n   */\r\n  private fallbackClassification(activities: RawActivityData[]): SessionType {\r\n    if (activities.length === 0) return 'unclear';\r\n\r\n    // === PREPROCESSING ===\r\n    const appNames = activities.map(a => a.appName.toLowerCase());\r\n    const windowTitles = activities.map(a => a.windowTitle.toLowerCase());\r\n    const uniqueApps = new Set(appNames);\r\n    const combinedText = [...appNames, ...windowTitles].join(' ');\r\n\r\n    // === METRICS ===\r\n    const totalDuration = activities.reduce((sum, a) => sum + a.duration, 0);\r\n    const avgDuration = totalDuration / activities.length;\r\n    const sessionLengthMinutes = totalDuration / (1000 * 60);\r\n    const appSwitchFrequency = activities.length / Math.max(sessionLengthMinutes, 1);\r\n\r\n    // === SCORING SYSTEM ===\r\n    const scores = {\r\n      'focused-work': 0,\r\n      'research': 0,\r\n      'entertainment': 0,\r\n      'break': 0,\r\n      'unclear': 0\r\n    };\r\n\r\n    // === DEVELOPMENT WORK SCORING ===\r\n    const developmentTools = [\r\n      { keywords: ['visual studio', 'vscode', 'vs code'], score: 15 },\r\n      { keywords: ['intellij', 'webstorm', 'pycharm'], score: 15 },\r\n      { keywords: ['sublime', 'atom', 'notepad++'], score: 12 },\r\n      { keywords: ['github', 'gitlab', 'bitbucket'], score: 10 },\r\n      { keywords: ['terminal', 'cmd', 'powershell', 'bash'], score: 8 },\r\n      { keywords: ['git', 'commit', 'pull request', 'merge'], score: 12 },\r\n      { keywords: ['docker', 'kubernetes', 'aws', 'azure'], score: 10 }\r\n    ];\r\n\r\n    developmentTools.forEach(tool => {\r\n      const matches = tool.keywords.filter(keyword => combinedText.includes(keyword)).length;\r\n      scores['focused-work'] += matches * tool.score;\r\n    });\r\n\r\n    // === FILE EXTENSION ANALYSIS ===\r\n    const codeExtensions = ['.js', '.ts', '.tsx', '.jsx', '.py', '.java', '.cpp', '.cs', '.php', '.rb', '.go', '.rs', '.vue', '.svelte', '.html', '.css', '.scss', '.sql'];\r\n    const codeFileCount = codeExtensions.filter(ext => combinedText.includes(ext)).length;\r\n    scores['focused-work'] += codeFileCount * 8;\r\n\r\n    // === PROFESSIONAL SOFTWARE SCORING ===\r\n    const professionalSoftware = [\r\n      { keywords: ['figma', 'sketch', 'adobe'], score: 12 },\r\n      { keywords: ['photoshop', 'illustrator', 'indesign'], score: 12 },\r\n      { keywords: ['excel', 'powerpoint', 'word'], score: 10 },\r\n      { keywords: ['google docs', 'sheets', 'slides'], score: 10 },\r\n      { keywords: ['slack', 'teams', 'zoom'], score: 8 },\r\n      { keywords: ['jira', 'confluence', 'trello'], score: 8 },\r\n      { keywords: ['database', 'sql', 'mongodb'], score: 10 }\r\n    ];\r\n\r\n    professionalSoftware.forEach(software => {\r\n      const matches = software.keywords.filter(keyword => combinedText.includes(keyword)).length;\r\n      scores['focused-work'] += matches * software.score;\r\n    });\r\n\r\n    // === RESEARCH & LEARNING SCORING ===\r\n    const researchPlatforms = [\r\n      { keywords: ['stack overflow', 'stackoverflow'], score: 20 },\r\n      { keywords: ['wikipedia', 'wiki'], score: 15 },\r\n      { keywords: ['coursera', 'udemy', 'khan academy'], score: 18 },\r\n      { keywords: ['documentation', 'docs', 'api'], score: 15 },\r\n      { keywords: ['tutorial', 'guide', 'how to'], score: 12 },\r\n      { keywords: ['arxiv', 'scholar', 'pubmed'], score: 18 },\r\n      { keywords: ['medium', 'dev.to', 'blog'], score: 8 }\r\n    ];\r\n\r\n    researchPlatforms.forEach(platform => {\r\n      const matches = platform.keywords.filter(keyword => combinedText.includes(keyword)).length;\r\n      scores['research'] += matches * platform.score;\r\n    });\r\n\r\n    // === EDUCATIONAL CONTENT ANALYSIS ===\r\n    if (combinedText.includes('youtube')) {\r\n      if (combinedText.includes('tutorial') || combinedText.includes('course') || \r\n          combinedText.includes('learn') || combinedText.includes('lesson')) {\r\n        scores['research'] += 15;\r\n      } else if (combinedText.includes('music') || combinedText.includes('playlist')) {\r\n        // Background music during work\r\n        if (scores['focused-work'] > 10) {\r\n          scores['focused-work'] += 5; // Boost work score for music during work\r\n        } else {\r\n          scores['entertainment'] += 5;\r\n        }\r\n      } else {\r\n        scores['entertainment'] += 12;\r\n      }\r\n    }\r\n\r\n    // === ENTERTAINMENT SCORING ===\r\n    const entertainmentPlatforms = [\r\n      { keywords: ['netflix', 'hulu', 'disney', 'prime video'], score: 18 },\r\n      { keywords: ['twitch', 'streaming', 'stream'], score: 15 },\r\n      { keywords: ['facebook', 'instagram', 'twitter', 'tiktok'], score: 12 },\r\n      { keywords: ['reddit', 'meme', 'funny'], score: 10 },\r\n      { keywords: ['game', 'gaming', 'steam'], score: 15 },\r\n      { keywords: ['shopping', 'amazon', 'ebay'], score: 8 },\r\n      { keywords: ['news', 'sports', 'entertainment'], score: 6 }\r\n    ];\r\n\r\n    entertainmentPlatforms.forEach(platform => {\r\n      const matches = platform.keywords.filter(keyword => combinedText.includes(keyword)).length;\r\n      scores['entertainment'] += matches * platform.score;\r\n    });\r\n\r\n    // === BREAK PATTERN SCORING ===\r\n    \r\n    // Duration-based break detection\r\n    if (avgDuration < 120000) { // <2 minutes average\r\n      scores['break'] += 15;\r\n    }\r\n\r\n    // High switching frequency\r\n    if (appSwitchFrequency > 3) { // >3 app switches per minute\r\n      scores['break'] += 12;\r\n    }\r\n\r\n    // Quick task indicators\r\n    const quickTaskIndicators = ['quick', 'brief', 'check', 'glance', 'notification'];\r\n    const quickTaskMatches = quickTaskIndicators.filter(indicator => combinedText.includes(indicator)).length;\r\n    scores['break'] += quickTaskMatches * 8;\r\n\r\n    // Email/calendar quick checks\r\n    if (combinedText.includes('email') || combinedText.includes('gmail') || combinedText.includes('calendar')) {\r\n      if (avgDuration < 300000) { // <5 minutes\r\n        scores['break'] += 10;\r\n      } else {\r\n        scores['focused-work'] += 5; // Longer email work\r\n      }\r\n    }\r\n\r\n    // System idle indicators\r\n    const idleIndicators = ['idle', 'screen saver', 'lock', 'away'];\r\n    const idleMatches = idleIndicators.filter(indicator => combinedText.includes(indicator)).length;\r\n    scores['break'] += idleMatches * 12;\r\n\r\n    // === DURATION-BASED ADJUSTMENTS ===\r\n    \r\n    // Long duration boosts for focus work and research\r\n    if (avgDuration > 900000) { // >15 minutes average\r\n      scores['focused-work'] += 10;\r\n      scores['research'] += 8;\r\n      scores['break'] -= 15; // Penalty for break classification\r\n    }\r\n\r\n    // Session length considerations\r\n    if (sessionLengthMinutes > 30) {\r\n      if (uniqueApps.size <= 2) { // Few apps for long time = focus\r\n        scores['focused-work'] += 8;\r\n        scores['research'] += 6;\r\n      }\r\n    }\r\n\r\n    // === CONTEXT-SPECIFIC ADJUSTMENTS ===\r\n    \r\n    // Professional context indicators\r\n    const professionalContext = ['project', 'client', 'meeting', 'deadline', 'report', 'proposal'];\r\n    const professionalMatches = professionalContext.filter(context => combinedText.includes(context)).length;\r\n    scores['focused-work'] += professionalMatches * 6;\r\n\r\n    // Learning context indicators\r\n    const learningContext = ['study', 'learn', 'course', 'training', 'certification'];\r\n    const learningMatches = learningContext.filter(context => combinedText.includes(context)).length;\r\n    scores['research'] += learningMatches * 8;\r\n\r\n    // === BROWSER-SPECIFIC ANALYSIS ===\r\n    if (combinedText.includes('chrome') || combinedText.includes('firefox') || combinedText.includes('edge')) {\r\n      // Analyze browser content more carefully\r\n      const workDomains = ['github', 'gitlab', 'aws', 'azure', 'google workspace', 'office 365'];\r\n      const researchDomains = ['stackoverflow', 'wikipedia', 'documentation', 'tutorial'];\r\n      const entertainmentDomains = ['youtube', 'netflix', 'facebook', 'instagram', 'reddit'];\r\n\r\n      const workDomainMatches = workDomains.filter(domain => combinedText.includes(domain)).length;\r\n      const researchDomainMatches = researchDomains.filter(domain => combinedText.includes(domain)).length;\r\n      const entertainmentDomainMatches = entertainmentDomains.filter(domain => combinedText.includes(domain)).length;\r\n\r\n      scores['focused-work'] += workDomainMatches * 5;\r\n      scores['research'] += researchDomainMatches * 5;\r\n      scores['entertainment'] += entertainmentDomainMatches * 5;\r\n    }\r\n\r\n    // === FINAL CLASSIFICATION ===\r\n    \r\n    // Apply minimum thresholds\r\n    const minThreshold = 8;\r\n    const maxScore = Math.max(...Object.values(scores));\r\n    \r\n    if (maxScore < minThreshold) {\r\n      return 'unclear';\r\n    }\r\n\r\n    // Find the category with highest score\r\n    const topCategory = Object.entries(scores).reduce((a, b) => \r\n      scores[a[0] as SessionType] > scores[b[0] as SessionType] ? a : b\r\n    )[0] as SessionType;\r\n\r\n    // Additional validation rules\r\n    if (topCategory === 'break' && sessionLengthMinutes > 20) {\r\n      // Long sessions are unlikely to be breaks\r\n      return avgDuration > 600000 ? 'focused-work' : 'unclear';\r\n    }\r\n\r\n    if (topCategory === 'entertainment' && scores['focused-work'] > scores['entertainment'] * 0.7) {\r\n      // Close call between work and entertainment, lean towards work if professional context\r\n      if (professionalMatches > 0) {\r\n        return 'focused-work';\r\n      }\r\n    }\r\n\r\n    if (topCategory === 'research' && scores['focused-work'] > scores['research'] * 0.8) {\r\n      // Close call between research and work - favor work if development tools present\r\n      if (scores['focused-work'] > 15 && combinedText.includes('code')) {\r\n        return 'focused-work';\r\n      }\r\n    }\r\n\r\n    return topCategory;\r\n  }\r\n\r\n  /**\r\n   * Generates a descriptive reasoning for rule-based classification\r\n   * \r\n   * @param activities - Activities that were classified\r\n   * @returns Descriptive reasoning for the classification\r\n   */\r\n  private generateFallbackReasoning(activities: RawActivityData[]): string {\r\n    if (activities.length === 0) return 'No activities to analyze';\r\n\r\n    const appNames = activities.map(a => a.appName.toLowerCase());\r\n    const uniqueApps = new Set(appNames);\r\n    const totalDuration = activities.reduce((sum, a) => sum + a.duration, 0);\r\n    const avgDuration = totalDuration / activities.length;\r\n\r\n    const workApps = ['code', 'visual studio', 'intellij', 'sublime', 'notepad++', 'atom'];\r\n    const hasWorkApps = workApps.some(app => \r\n      [...uniqueApps].some(appName => appName.includes(app))\r\n    );\r\n\r\n    const entertainmentApps = ['chrome', 'firefox', 'youtube', 'netflix', 'spotify', 'game'];\r\n    const hasEntertainmentApps = entertainmentApps.some(app =>\r\n      [...uniqueApps].some(appName => appName.includes(app))\r\n    );\r\n\r\n    const researchApps = ['browser', 'pdf', 'reader', 'documentation'];\r\n    const hasResearchApps = researchApps.some(app =>\r\n      [...uniqueApps].some(appName => appName.includes(app))\r\n    );\r\n\r\n    if (hasWorkApps) {\r\n      return `Detected development/work applications: ${[...uniqueApps].filter(app => \r\n        workApps.some(workApp => app.includes(workApp))\r\n      ).join(', ')}`;\r\n    }\r\n\r\n    if (hasResearchApps) {\r\n      return `Detected research/reading applications: ${[...uniqueApps].filter(app => \r\n        researchApps.some(researchApp => app.includes(researchApp))\r\n      ).join(', ')}`;\r\n    }\r\n\r\n    if (hasEntertainmentApps) {\r\n      return `Detected entertainment applications: ${[...uniqueApps].filter(app => \r\n        entertainmentApps.some(entApp => app.includes(entApp))\r\n      ).join(', ')}`;\r\n    }\r\n\r\n    if (avgDuration < 30000) {\r\n      return `Short average activity duration (${Math.round(avgDuration / 1000)}s) suggests break/idle time`;\r\n    }\r\n\r\n    return `Mixed activity patterns across ${uniqueApps.size} applications - unable to clearly classify`;\r\n  }\r\n\r\n  /**\r\n   * Saves session data to database\r\n   * \r\n   * @param sessionData - Session data to save\r\n   * @returns Promise resolving to session ID\r\n   */\r\n  private async saveSession(sessionData: CreateSessionData): Promise<number> {\r\n    const stmt = this.db.prepare(`\r\n      INSERT INTO sessions (\r\n        start_time, end_time, duration, session_type, \r\n        confidence_score, user_feedback\r\n      ) VALUES (?, ?, ?, ?, ?, ?)\r\n    `);\r\n\r\n    const result = stmt.run(\r\n      sessionData.startTime.toISOString(),\r\n      sessionData.endTime.toISOString(),\r\n      sessionData.duration,\r\n      sessionData.sessionType,\r\n      sessionData.confidenceScore,\r\n      sessionData.userFeedback\r\n    );\r\n\r\n    return result.lastInsertRowid as number;\r\n  }\r\n\r\n  /**\r\n   * Links activities to a session in the database\r\n   * \r\n   * @param activities - Activities to link\r\n   * @param sessionId - Session ID to link to\r\n   */\r\n  private async linkActivitiesToSession(\r\n    activities: RawActivityData[], \r\n    sessionId: number\r\n  ): Promise<void> {\r\n    const stmt = this.db.prepare('UPDATE activities SET session_id = ? WHERE id = ?');\r\n    \r\n    for (const activity of activities) {\r\n      stmt.run(sessionId, activity.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats duration in milliseconds to human-readable string\r\n   * \r\n   * @param ms - Duration in milliseconds\r\n   * @returns Formatted duration string\r\n   */\r\n  private formatDuration(ms: number): string {\r\n    const minutes = Math.floor(ms / (1000 * 60));\r\n    const seconds = Math.floor((ms % (1000 * 60)) / 1000);\r\n    \r\n    if (minutes > 0) {\r\n      return `${minutes}m ${seconds}s`;\r\n    } else {\r\n      return `${seconds}s`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets application category for UI display\r\n   * \r\n   * @param appName - Application name\r\n   * @returns Application category\r\n   */\r\n  private getAppCategory(appName: string): string {\r\n    const name = appName.toLowerCase();\r\n    \r\n    if (name.includes('chrome') || name.includes('firefox') || name.includes('edge')) {\r\n      return 'Browser';\r\n    }\r\n    if (name.includes('code') || name.includes('visual studio')) {\r\n      return 'Development';\r\n    }\r\n    if (name.includes('word') || name.includes('excel') || name.includes('powerpoint')) {\r\n      return 'Office';\r\n    }\r\n    if (name.includes('slack') || name.includes('teams') || name.includes('discord')) {\r\n      return 'Communication';\r\n    }\r\n    \r\n    return 'Application';\r\n  }\r\n}\r\n\r\n// === CONVENIENCE FUNCTIONS ===\r\n\r\n/**\r\n * Creates a session classifier instance\r\n * \r\n * @param options - Processing options\r\n * @returns SessionClassifier instance\r\n */\r\nexport function createSessionClassifier(options?: ProcessingOptions): SessionClassifier {\r\n  return new SessionClassifier(options);\r\n}\r\n\r\n/**\r\n * Processes activities into sessions using default configuration\r\n * \r\n * @param activities - Activities to process\r\n * @param options - Processing options\r\n * @returns Promise resolving to processing statistics\r\n */\r\nexport async function processActivitiesIntoSessions(\r\n  activities: RawActivityData[],\r\n  options: ProcessingOptions = {}\r\n): Promise<ProcessingStats> {\r\n  const classifier = createSessionClassifier(options);\r\n  return await classifier.processActivities(activities, options);\r\n}\r\n","/**\r\n * Main Process - Electron application entry point\r\n * \r\n * Main entry point for the FocusFlare Electron application. Handles application\r\n * lifecycle, window management, system tray integration, IPC communication,\r\n * and coordinates between database, monitoring, and UI components.\r\n * \r\n * @module Main\r\n * @author FocusFlare Team\r\n * @since 0.1.0\r\n */\r\n\r\nimport { app, BrowserWindow, ipcMain, Tray, Menu, nativeImage } from 'electron';\r\nimport path from 'path';\r\nimport { \r\n  initializeDatabase, \r\n  closeDatabaseConnection,\r\n  checkDatabaseHealth,\r\n  getActivities,\r\n  getSessionsByDate,\r\n  updateSession,\r\n  getUnclassifiedActivities,\r\n  getUserSettings,\r\n  updateUserSettings,\r\n  resetUserSettings,\r\n  clearAllActivityData\r\n} from '@/main/database/connection';\r\nimport { \r\n  startActivityLogging, \r\n  stopActivityLogging,\r\n  isActivityLoggingActive\r\n} from '@/main/system-monitoring/activity-logger';\r\nimport { IPC_CHANNELS } from '@/shared/types/activity-types';\r\nimport type { \r\n  GetActivitiesByDateRequest,\r\n  GetRecentActivitiesRequest,\r\n  GetSessionsByDateRequest,\r\n  UpdateSessionRequest,\r\n  ActivityData,\r\n  ActivityTableRow\r\n} from '@/shared/types/activity-types';\r\nimport {\r\n  APP_NAME,\r\n  APP_VERSION,\r\n  DEFAULT_WINDOW_WIDTH,\r\n  DEFAULT_WINDOW_HEIGHT,\r\n  MIN_WINDOW_WIDTH,\r\n  MIN_WINDOW_HEIGHT,\r\n  TRAY_TOOLTIP,\r\n  TRAY_MENU,\r\n  DEBUG_LOGGING,\r\n  DEFAULT_ACTIVITY_LIMIT\r\n} from '@/shared/constants/app-constants';\r\nimport { processActivitiesIntoSessions } from '@/main/ai-integration/session-classifier';\r\n\r\n// === GLOBAL STATE ===\r\n\r\n/** Main dashboard window instance */\r\nlet mainWindow: BrowserWindow | null = null;\r\n\r\n/** System tray instance */\r\nlet tray: Tray | null = null;\r\n\r\n/** Application ready state */\r\nlet isAppReady = false;\r\n\r\n/** Monitoring pause state */\r\nlet isMonitoringPaused = false;\r\n\r\n// === UTILITY FUNCTIONS ===\r\n\r\n/**\r\n * Gets the correct path for development vs production\r\n */\r\nfunction getResourcePath(relativePath: string): string {\r\n  if (app.isPackaged) {\r\n    return path.join(process.resourcesPath, relativePath);\r\n  }\r\n  return path.join(__dirname, '..', '..', relativePath);\r\n}\r\n\r\n/**\r\n * Transforms database rows to UI-friendly activity data\r\n */\r\nfunction transformActivityData(rows: ActivityTableRow[]): ActivityData[] {\r\n  return rows.map(row => ({\r\n    id: row.id,\r\n    timestamp: new Date(row.timestamp),\r\n    appName: row.app_name,\r\n    windowTitle: row.window_title,\r\n    duration: row.duration,\r\n    formattedDuration: formatDuration(row.duration),\r\n    category: undefined // Will be added in Phase 2 with AI classification\r\n  }));\r\n}\r\n\r\n/**\r\n * Formats duration in milliseconds to human-readable string\r\n */\r\nfunction formatDuration(milliseconds: number): string {\r\n  const seconds = Math.floor(milliseconds / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes % 60}m`;\r\n  } else if (minutes > 0) {\r\n    return `${minutes}m ${seconds % 60}s`;\r\n  } else {\r\n    return `${seconds}s`;\r\n  }\r\n}\r\n\r\n// === WINDOW MANAGEMENT ===\r\n\r\n/**\r\n * Creates the main dashboard window\r\n */\r\nfunction createMainWindow(): void {\r\n  // Create the browser window\r\n  mainWindow = new BrowserWindow({\r\n    width: DEFAULT_WINDOW_WIDTH,\r\n    height: DEFAULT_WINDOW_HEIGHT,\r\n    minWidth: MIN_WINDOW_WIDTH,\r\n    minHeight: MIN_WINDOW_HEIGHT,\r\n    title: APP_NAME,\r\n    icon: getResourcePath('assets/icons/icon.png'),\r\n    show: false, // Start hidden\r\n    webPreferences: {\r\n      nodeIntegration: false, // Security: disable node integration\r\n      contextIsolation: true, // Security: enable context isolation\r\n      // Security: disable remote module (removed in newer Electron versions)\r\n      preload: path.join(__dirname, 'preload.js'),\r\n      sandbox: false // Required for preload script access\r\n    }\r\n  });\r\n\r\n  // Load the application\r\n  if (DEBUG_LOGGING) {\r\n    mainWindow.webContents.openDevTools();\r\n  }\r\n\r\n  // In development, load from vite dev server\r\n  if (!app.isPackaged) {\r\n    mainWindow.loadURL('http://localhost:5173');\r\n  } else {\r\n    // In production, load from built files\r\n    mainWindow.loadFile(path.join(__dirname, '..', 'dist', 'index.html'));\r\n  }\r\n\r\n  // Hide window instead of closing (minimize to tray)\r\n  mainWindow.on('close', (event) => {\r\n    // Check if app is quitting by seeing if all windows are being closed\r\n    if (BrowserWindow.getAllWindows().length > 1) {\r\n      event.preventDefault();\r\n      hideMainWindow();\r\n    }\r\n  });\r\n\r\n  // Handle window ready\r\n  mainWindow.once('ready-to-show', () => {\r\n    if (DEBUG_LOGGING) {\r\n      console.log('Main window ready to show');\r\n      // Auto-show window in development mode\r\n      mainWindow?.show();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Shows the main dashboard window\r\n */\r\nfunction showMainWindow(): void {\r\n  if (!mainWindow) {\r\n    createMainWindow();\r\n  }\r\n  \r\n  if (mainWindow) {\r\n    mainWindow.show();\r\n    mainWindow.focus();\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log('Main window shown');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hides the main dashboard window\r\n */\r\nfunction hideMainWindow(): void {\r\n  if (mainWindow) {\r\n    mainWindow.hide();\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log('Main window hidden');\r\n    }\r\n  }\r\n}\r\n\r\n// === SYSTEM TRAY ===\r\n\r\n/**\r\n * Creates the system tray with context menu\r\n */\r\nfunction createSystemTray(): void {\r\n  try {\r\n    // Create tray icon with fallback\r\n    const iconPath = getResourcePath('assets/icons/tray-icon.png');\r\n    let trayIcon = nativeImage.createFromPath(iconPath);\r\n    \r\n    // Fallback to empty icon if file doesn't exist\r\n    if (trayIcon.isEmpty()) {\r\n      // Create a simple 16x16 white square as fallback\r\n      trayIcon = nativeImage.createFromBuffer(Buffer.from([\r\n        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,\r\n        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,\r\n        0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0xF3, 0xFF, 0x61, 0x00, 0x00, 0x00,\r\n        0x0D, 0x49, 0x44, 0x41, 0x54, 0x38, 0x11, 0x63, 0xF8, 0xFF, 0xFF, 0x3F,\r\n        0x00, 0x05, 0xFE, 0x02, 0xFE, 0xDC, 0xCC, 0x59, 0xE7, 0x00, 0x00, 0x00,\r\n        0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\r\n      ]));\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log('Using fallback tray icon (icon file not found)');\r\n      }\r\n    }\r\n    \r\n    tray = new Tray(trayIcon);\r\n    \r\n    // Set tooltip\r\n    tray.setToolTip(TRAY_TOOLTIP);\r\n    \r\n    // Double-click to show/hide window\r\n    tray.on('double-click', () => {\r\n      if (mainWindow?.isVisible()) {\r\n        hideMainWindow();\r\n      } else {\r\n        showMainWindow();\r\n      }\r\n    });\r\n\r\n    // Initialize with proper menu\r\n    updateSystemTray();\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log('System tray created successfully');\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to create system tray:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Updates the system tray with current monitoring status\r\n */\r\nfunction updateSystemTray(): void {\r\n  if (!tray) return;\r\n\r\n  // Create context menu with dynamic pause/resume option\r\n  const contextMenu = Menu.buildFromTemplate([\r\n    {\r\n      label: TRAY_MENU.SHOW_DASHBOARD,\r\n      click: showMainWindow\r\n    },\r\n    {\r\n      label: TRAY_MENU.HIDE_DASHBOARD,\r\n      click: hideMainWindow\r\n    },\r\n    { type: 'separator' },\r\n    {\r\n      label: isMonitoringPaused ? 'Resume Monitoring' : 'Pause Monitoring',\r\n      click: () => {\r\n        toggleMonitoring();\r\n      }\r\n    },\r\n    { type: 'separator' },\r\n    {\r\n      label: TRAY_MENU.SETTINGS,\r\n      click: () => {\r\n        showMainWindow();\r\n        // Send message to open settings panel\r\n        mainWindow?.webContents.send('open-settings-panel');\r\n      }\r\n    },\r\n    { type: 'separator' },\r\n    {\r\n      label: TRAY_MENU.QUIT,\r\n      click: () => {\r\n        app.quit();\r\n      }\r\n    }\r\n  ]);\r\n  \r\n  tray.setContextMenu(contextMenu);\r\n}\r\n\r\n/**\r\n * Toggle monitoring pause/resume state\r\n */\r\nasync function toggleMonitoring(): Promise<void> {\r\n  try {\r\n    if (isMonitoringPaused) {\r\n      // Resume monitoring\r\n      await startActivityLogging();\r\n      isMonitoringPaused = false;\r\n      console.log('Activity monitoring resumed');\r\n    } else {\r\n      // Pause monitoring\r\n      await stopActivityLogging();\r\n      isMonitoringPaused = true;\r\n      console.log('Activity monitoring paused');\r\n    }\r\n    \r\n    // Update tray menu to reflect new state\r\n    updateSystemTray();\r\n  } catch (error) {\r\n    console.error('Failed to toggle monitoring:', error);\r\n  }\r\n}\r\n\r\n// === IPC HANDLERS ===\r\n\r\n/**\r\n * Sets up IPC handlers for communication with renderer process\r\n */\r\nfunction setupIpcHandlers(): void {\r\n  // Activity data handlers\r\n  ipcMain.handle(IPC_CHANNELS.GET_ACTIVITIES, async () => {\r\n    try {\r\n      if (DEBUG_LOGGING) {\r\n        console.log('IPC: GET_ACTIVITIES called');\r\n      }\r\n      \r\n      const activities = getActivities({ limit: DEFAULT_ACTIVITY_LIMIT });\r\n      const transformed = transformActivityData(activities);\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log(`IPC: Returning ${activities.length} raw activities, ${transformed.length} transformed`);\r\n        console.log('First few activities:', activities.slice(0, 3));\r\n      }\r\n      \r\n      return transformed;\r\n    } catch (error) {\r\n      console.error('Failed to get activities:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  ipcMain.handle(IPC_CHANNELS.GET_RECENT_ACTIVITIES, async (_, request: GetRecentActivitiesRequest) => {\r\n    try {\r\n      if (DEBUG_LOGGING) {\r\n        console.log('IPC: GET_RECENT_ACTIVITIES called with request:', request);\r\n      }\r\n      \r\n      const { hours, limit = DEFAULT_ACTIVITY_LIMIT } = request;\r\n      const startDate = new Date(Date.now() - (hours * 60 * 60 * 1000));\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log(`IPC: Fetching activities since ${startDate.toISOString()}, limit: ${limit}`);\r\n      }\r\n      \r\n      const activities = getActivities({ \r\n        startDate, \r\n        limit \r\n      });\r\n      \r\n      const transformed = transformActivityData(activities);\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log(`IPC: Found ${activities.length} raw activities, returning ${transformed.length} transformed`);\r\n        if (activities.length > 0) {\r\n          console.log('Sample activity:', activities[0]);\r\n        }\r\n      }\r\n      \r\n      return transformed;\r\n    } catch (error) {\r\n      console.error('Failed to get recent activities:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  ipcMain.handle(IPC_CHANNELS.GET_ACTIVITIES_BY_DATE, async (_, request: GetActivitiesByDateRequest) => {\r\n    try {\r\n      if (DEBUG_LOGGING) {\r\n        console.log('IPC: GET_ACTIVITIES_BY_DATE called with request:', request);\r\n      }\r\n      \r\n      const { startDate, endDate, limit = DEFAULT_ACTIVITY_LIMIT } = request;\r\n      \r\n      const activities = getActivities({\r\n        startDate: new Date(startDate),\r\n        endDate: new Date(endDate),\r\n        limit\r\n      });\r\n      \r\n      const transformed = transformActivityData(activities);\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log(`IPC: Found ${activities.length} activities for date range, returning ${transformed.length} transformed`);\r\n      }\r\n      \r\n      return transformed;\r\n    } catch (error) {\r\n      console.error('Failed to get activities by date:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  // System operation handlers\r\n  ipcMain.handle(IPC_CHANNELS.SHOW_DASHBOARD, async () => {\r\n    showMainWindow();\r\n  });\r\n  \r\n  ipcMain.handle(IPC_CHANNELS.HIDE_DASHBOARD, async () => {\r\n    hideMainWindow();\r\n  });\r\n  \r\n  ipcMain.handle(IPC_CHANNELS.GET_APP_VERSION, async () => {\r\n    return APP_VERSION;\r\n  });\r\n  \r\n  // Session operation handlers\r\n  ipcMain.handle(IPC_CHANNELS.GET_SESSIONS_BY_DATE, async (_, request: GetSessionsByDateRequest) => {\r\n    try {\r\n      return getSessionsByDate(request);\r\n    } catch (error) {\r\n      console.error('Failed to get sessions by date:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  ipcMain.handle(IPC_CHANNELS.UPDATE_SESSION, async (_, request: UpdateSessionRequest) => {\r\n    try {\r\n      updateSession(request);\r\n    } catch (error) {\r\n      console.error('Failed to update session:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  ipcMain.handle(IPC_CHANNELS.CLASSIFY_SESSION, async () => {\r\n    try {\r\n      // Get recent unclassified activities\r\n      const activities = getUnclassifiedActivities(24); // Last 24 hours\r\n      \r\n      if (activities.length === 0) {\r\n        if (DEBUG_LOGGING) {\r\n          console.log('No unclassified activities found for session classification');\r\n        }\r\n        return;\r\n      }\r\n      \r\n      // Process activities into sessions\r\n      const stats = await processActivitiesIntoSessions(activities, {\r\n        useAI: true,\r\n        context: 'User-triggered classification'\r\n      });\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log('Session classification completed:', stats);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to classify sessions:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  // Database operation handlers\r\n  ipcMain.handle(IPC_CHANNELS.DB_HEALTH_CHECK, async () => {\r\n    try {\r\n      return await checkDatabaseHealth();\r\n    } catch (error) {\r\n      console.error('Database health check failed:', error);\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // AI/Ollama operation handlers\r\n  ipcMain.handle('ollama:health-check', async () => {\r\n    try {\r\n      // Use Node.js http module for better compatibility\r\n      const http = require('http');\r\n      \r\n      if (DEBUG_LOGGING) {\r\n        console.log('Starting Ollama health check...');\r\n      }\r\n      \r\n      return new Promise<boolean>((resolve) => {\r\n        const req = http.get('http://127.0.0.1:11434/api/tags', (res: any) => {\r\n          if (DEBUG_LOGGING) {\r\n            console.log(`Ollama health check response: ${res.statusCode}`);\r\n          }\r\n          \r\n          let data = '';\r\n          res.on('data', (chunk: any) => {\r\n            data += chunk;\r\n          });\r\n          \r\n          res.on('end', () => {\r\n            if (res.statusCode === 200) {\r\n              try {\r\n                const parsed = JSON.parse(data);\r\n                const hasModel = parsed.models?.some((model: any) => \r\n                  model.name.includes('llama3.2:3b') || model.name.includes('llama3.2')\r\n                );\r\n                if (DEBUG_LOGGING) {\r\n                  console.log('Ollama models found:', parsed.models?.map((m: any) => m.name));\r\n                  console.log('Has required model (llama3.2):', hasModel);\r\n                }\r\n                resolve(hasModel);\r\n              } catch (parseError) {\r\n                if (DEBUG_LOGGING) {\r\n                  console.warn('Failed to parse Ollama response:', parseError);\r\n                }\r\n                resolve(false);\r\n              }\r\n            } else {\r\n              resolve(false);\r\n            }\r\n          });\r\n        });\r\n        \r\n        req.on('error', (error: any) => {\r\n          if (DEBUG_LOGGING) {\r\n            console.warn('Ollama health check request error:', error.message);\r\n          }\r\n          resolve(false);\r\n        });\r\n        \r\n        req.setTimeout(5000, () => {\r\n          if (DEBUG_LOGGING) {\r\n            console.warn('Ollama health check timeout');\r\n          }\r\n          req.destroy();\r\n          resolve(false);\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Ollama health check failed:', error);\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Monitoring control handlers\r\n  ipcMain.handle('monitoring:get-status', async () => {\r\n    return {\r\n      isActive: !isMonitoringPaused,\r\n      isPaused: isMonitoringPaused\r\n    };\r\n  });\r\n\r\n  ipcMain.handle('monitoring:pause', async () => {\r\n    try {\r\n      isMonitoringPaused = true;\r\n      await stopActivityLogging();\r\n      console.log('Activity monitoring paused');\r\n      updateSystemTray();\r\n    } catch (error) {\r\n      console.error('Failed to pause monitoring:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  ipcMain.handle('monitoring:resume', async () => {\r\n    try {\r\n      isMonitoringPaused = false;\r\n      await startActivityLogging();\r\n      console.log('Activity monitoring resumed');\r\n      updateSystemTray();\r\n    } catch (error) {\r\n      console.error('Failed to resume monitoring:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  // Settings handlers\r\n  ipcMain.handle('settings:get', async () => {\r\n    try {\r\n      const settings = await getUserSettings();\r\n      if (DEBUG_LOGGING) {\r\n        console.log('Retrieved settings for renderer:', Object.keys(settings));\r\n      }\r\n      return settings;\r\n    } catch (error) {\r\n      console.error('Failed to get settings:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  ipcMain.handle('settings:update', async (_, updates) => {\r\n    try {\r\n      await updateUserSettings(updates);\r\n      if (DEBUG_LOGGING) {\r\n        console.log('Settings updated successfully:', Object.keys(updates));\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update settings:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  ipcMain.handle('settings:reset', async () => {\r\n    try {\r\n      await resetUserSettings();\r\n      if (DEBUG_LOGGING) {\r\n        console.log('Settings reset to defaults successfully');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to reset settings:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  ipcMain.handle('settings:clear-activity-data', async () => {\r\n    try {\r\n      const result = await clearAllActivityData();\r\n      if (DEBUG_LOGGING) {\r\n        console.log('Activity data cleared successfully:', result);\r\n      }\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Failed to clear activity data:', error);\r\n      throw error;\r\n    }\r\n  });\r\n  \r\n  if (DEBUG_LOGGING) {\r\n    console.log('IPC handlers registered successfully');\r\n  }\r\n}\r\n\r\n// === APPLICATION LIFECYCLE ===\r\n\r\n/**\r\n * Initializes the application\r\n */\r\nasync function initializeApp(): Promise<void> {\r\n  try {\r\n    // Initialize database\r\n    await initializeDatabase();\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log('=== DEBUG: Checking database after initialization ===');\r\n      \r\n      // Quick database health check\r\n      const healthOk = await checkDatabaseHealth();\r\n      console.log(`Database health check: ${healthOk ? '✅ OK' : '❌ FAILED'}`);\r\n      \r\n      // Check if we have any existing activities\r\n      try {\r\n        const allActivities = getActivities({ limit: 5 });\r\n        console.log(`Activities in database: ${allActivities.length}`);\r\n        \r\n        if (allActivities.length > 0) {\r\n          console.log('Latest activity:', allActivities[0]);\r\n        } else {\r\n          console.log('⚠️ No activities found in database');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Failed to query activities:', error);\r\n      }\r\n    }\r\n    \r\n    // Start activity logging\r\n    const monitoringStarted = await startActivityLogging();\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log(`Activity monitoring started: ${monitoringStarted ? '✅ OK' : '❌ FAILED'}`);\r\n      \r\n      // Check monitoring status\r\n      const isActive = isActivityLoggingActive();\r\n      console.log(`Activity logging active: ${isActive ? '✅ YES' : '❌ NO'}`);\r\n    }\r\n    \r\n    // Create system tray\r\n    createSystemTray();\r\n    \r\n    // Setup IPC handlers\r\n    setupIpcHandlers();\r\n    \r\n    // Auto-create and show window in development mode\r\n    if (DEBUG_LOGGING) {\r\n      createMainWindow();\r\n    }\r\n    \r\n    isAppReady = true;\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log('Application initialized successfully');\r\n      \r\n      // Wait a bit and check if activities are being logged\r\n      setTimeout(() => {\r\n        console.log('=== DEBUG: Checking activity logging after 10 seconds ===');\r\n        try {\r\n          const recentActivities = getActivities({ \r\n            startDate: new Date(Date.now() - 30000), // Last 30 seconds\r\n            limit: 10 \r\n          });\r\n          console.log(`New activities in last 30 seconds: ${recentActivities.length}`);\r\n          \r\n          if (recentActivities.length > 0) {\r\n            console.log('✅ Activity logging is working!');\r\n            console.log('Recent activities:', recentActivities.slice(0, 3));\r\n          } else {\r\n            console.log('⚠️ No new activities logged in the last 30 seconds');\r\n            console.log('This could mean:');\r\n            console.log('1. Activity logging is not working');\r\n            console.log('2. No window changes occurred');\r\n            console.log('3. Current app is excluded from tracking');\r\n          }\r\n        } catch (error) {\r\n          console.error('❌ Failed to check recent activities:', error);\r\n        }\r\n      }, 10000);\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to initialize application:', error);\r\n    app.quit();\r\n  }\r\n}\r\n\r\n/**\r\n * Cleanup when application is quitting\r\n */\r\nasync function cleanup(): Promise<void> {\r\n  try {\r\n    // Stop activity logging\r\n    await stopActivityLogging();\r\n    \r\n    // Close database connection\r\n    closeDatabaseConnection();\r\n    \r\n    if (DEBUG_LOGGING) {\r\n      console.log('Application cleanup completed');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error during cleanup:', error);\r\n  }\r\n}\r\n\r\n// === ELECTRON EVENT HANDLERS ===\r\n\r\n// App ready event\r\napp.whenReady().then(initializeApp);\r\n\r\n// Quit when all windows are closed (except on macOS)\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n  }\r\n});\r\n\r\n// Handle app activation (macOS)\r\napp.on('activate', () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createMainWindow();\r\n  }\r\n});\r\n\r\n// Handle before quit\r\napp.on('before-quit', async (event) => {\r\n  if (isAppReady) {\r\n    event.preventDefault();\r\n    await cleanup();\r\n    app.exit();\r\n  }\r\n});\r\n\r\n// Security: Prevent new window creation (for older Electron versions)\r\napp.on('web-contents-created', (_, contents) => {\r\n  // Handle navigation attempts for security\r\n  contents.on('will-navigate', (event, navigationUrl) => {\r\n    const parsedUrl = new URL(navigationUrl);\r\n    if (parsedUrl.origin !== 'http://localhost:5173' && !navigationUrl.startsWith('file://')) {\r\n      event.preventDefault();\r\n    }\r\n  });\r\n});\r\n\r\n// Handle certificate errors (if needed for future HTTPS requests)\r\napp.on('certificate-error', (event, _webContents, _url, _error, _certificate, callback) => {\r\n  // For now, reject all certificate errors for security\r\n  event.preventDefault();\r\n  callback(false);\r\n});\r\n\r\nif (DEBUG_LOGGING) {\r\n  console.log(`${APP_NAME} v${APP_VERSION} starting...`);\r\n} "],"names":["DEBUG_LOGGING","app","runMigration002","formatDuration","currentSession","BrowserWindow","nativeImage","Tray","Menu","ipcMain"],"mappings":"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"}